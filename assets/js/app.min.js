var Util = function() {
    return {
        isInView: function(el, threshold) {
            if (typeof jQuery === "function" && el instanceof jQuery) {
                el = el[0];
            }
            var threshold = Math.floor(threshold * 100), winY = window.innerHeight - threshold || document.documentElement.clientHeight - threshold, bounds = el.getBoundingClientRect(), isTopVisible = bounds.top >= 0 && bounds.top <= winY;
            return isTopVisible;
        },
        isAtTop: function(el) {
            var distance = $(el).offset().top, $window = $(window);
            if ($window.scrollTop() >= distance / 1.5) {
                return true;
            }
        },
        forEach: function(array, callback, scope) {
            for (var i = 0; i < array.length; i++) {
                callback.call(scope, i, array[i]);
            }
        },
        throttle: function(callback, ms) {
            var wait = false;
            return function() {
                if (!wait) {
                    callback.call();
                    wait = true;
                    setTimeout(function() {
                        wait = false;
                    }, ms);
                }
            };
        },
        hasClass: function(el, className) {
            if (el.classList.contains(className)) {
                return true;
            }
        },
        classList: function(el) {
            var list = el.classList;
            return {
                toggle: function(c) {
                    list.toggle(c);
                    return this;
                },
                add: function(c) {
                    list.add(c);
                    return this;
                },
                remove: function(c) {
                    list.remove(c);
                    return this;
                }
            };
        },
        loadJSONP: function(url, callback, context) {
            console.log("hi utils");
            var unique = 0;
            console.log("inside");
            var name = "_jsonp_" + unique++;
            if (url.match(/\?/)) url += "&callback=" + name; else url += "?callback=" + name;
            console.log("util url", url);
            var script = document.createElement("script");
            script.type = "text/javascript";
            script.src = url;
            window[name] = function(data) {
                callback.call(context || window, data);
                document.getElementsByTagName("head")[0].removeChild(script);
                script = null;
                delete window[name];
                console.log([ name ]);
            };
            document.getElementsByTagName("head")[0].appendChild(script);
        }
    };
}();

function whichAnimationEvent() {
    var t, el = document.createElement("fakeelement");
    var animations = {
        animation: "animationend",
        OAnimation: "oAnimationEnd",
        MozAnimation: "animationend",
        WebkitAnimation: "webkitAnimationEnd"
    };
    for (t in animations) {
        if (el.style[t] !== undefined) {
            return animations[t];
        }
    }
}

var animationEvent = whichAnimationEvent();

var PageTransition = function() {
    var s, html = document.querySelector("html"), siteURL = "http://" || "https://" + top.location.host.toString();
    var noTrans = "no-trans";
    return {
        settings: {
            transLinks: document.querySelectorAll('a[href^="' + siteURL + '"], a[href^="/"]'),
            linkLocation: null,
            html_body: document.querySelectorAll("html, body"),
            html: document.querySelector("html"),
            body: document.querySelector("body"),
            exitDuration: 2e3,
            entranceDuration: 1e3,
            menuCloseDuration: 400,
            isLoaded: false,
            isMenuLink: false
        },
        init: function() {
            s = this.settings;
            this.isPageLoaded();
            this.entrance();
            this.transitionPage();
            this.unloadWindow();
            this.workaround();
        },
        entrance: function() {
            s.html.classList.add("is-loading");
            if (s.isLoaded = true) {
                setTimeout(function() {
                    s.html.classList.remove("is-loading");
                    s.html.classList.add("is-loaded");
                }, s.entranceDuration);
            }
        },
        exit: function() {
            s.html.classList.add("is-exiting");
            setTimeout(function() {
                PageTransition.redirectPage();
            }, s.exitDuration);
        },
        isPageLoaded: function() {
            var state = document.readyState;
            if (state === "interactive" || state === "complete") {
                s.isLoaded = true;
            }
        },
        transitionPage: function() {
            Util.forEach(s.transLinks, function(index, transLink) {
                transLink.addEventListener("click", function(e) {
                    s.linkLocation = this.href;
                    if (s.html.classList.contains(noTrans) || this.classList.contains(noTrans)) return;
                    if (e.metaKey || e.ctrlKey || e.shiftKey) return;
                    e.preventDefault();
                    if (this.classList.contains("site-menu__link")) {
                        console.log("menu Link");
                        var transTest = document.querySelector(".site-content");
                        SiteMenu.close();
                        transTest.addEventListener("transitionend", function(event) {
                            PageTransition.exit();
                            console.log("done");
                        });
                    } else {
                        console.log("no menu link");
                        PageTransition.exit();
                    }
                });
            });
        },
        redirectPage: function() {
            window.location = s.linkLocation;
        },
        unloadWindow: function() {
            window.onbeforeunload = null;
        },
        workaround: function() {
            window.onpageshow = function(e) {
                if (e.persisted) window.location.reload();
            };
        }
    };
}();

PageTransition.init();

var enableInlineVideo = function() {
    "use strict";
    function intervalometer(cb, request, cancel, requestParameter) {
        var requestId;
        var previousLoopTime;
        function loop(now) {
            requestId = request(loop, requestParameter);
            cb(now - (previousLoopTime || now));
            previousLoopTime = now;
        }
        return {
            start: function start() {
                if (!requestId) {
                    loop(0);
                }
            },
            stop: function stop() {
                cancel(requestId);
                requestId = null;
                previousLoopTime = 0;
            }
        };
    }
    function frameIntervalometer(cb) {
        return intervalometer(cb, requestAnimationFrame, cancelAnimationFrame);
    }
    function preventEvent(element, eventName, test) {
        function handler(e) {
            if (!test || test(element, eventName)) {
                e.stopImmediatePropagation();
            }
        }
        element.addEventListener(eventName, handler);
        return handler;
    }
    function proxyProperty(object, propertyName, sourceObject, copyFirst) {
        function get() {
            return sourceObject[propertyName];
        }
        function set(value) {
            sourceObject[propertyName] = value;
        }
        if (copyFirst) {
            set(object[propertyName]);
        }
        Object.defineProperty(object, propertyName, {
            get: get,
            set: set
        });
    }
    function proxyEvent(object, eventName, sourceObject) {
        sourceObject.addEventListener(eventName, function() {
            return object.dispatchEvent(new Event(eventName));
        });
    }
    function dispatchEventAsync(element, type) {
        Promise.resolve().then(function() {
            element.dispatchEvent(new Event(type));
        });
    }
    var iOS8or9 = typeof document === "object" && "object-fit" in document.head.style && !matchMedia("(-webkit-video-playable-inline)").matches;
    var IIV = "bfred-it:iphone-inline-video";
    var IIVEvent = "bfred-it:iphone-inline-video:event";
    var IIVPlay = "bfred-it:iphone-inline-video:nativeplay";
    var IIVPause = "bfred-it:iphone-inline-video:nativepause";
    function getAudioFromVideo(video) {
        var audio = new Audio();
        proxyEvent(video, "play", audio);
        proxyEvent(video, "playing", audio);
        proxyEvent(video, "pause", audio);
        audio.crossOrigin = video.crossOrigin;
        audio.src = video.src || video.currentSrc || "data:";
        return audio;
    }
    var lastRequests = [];
    var requestIndex = 0;
    var lastTimeupdateEvent;
    function setTime(video, time, rememberOnly) {
        if ((lastTimeupdateEvent || 0) + 200 < Date.now()) {
            video[IIVEvent] = true;
            lastTimeupdateEvent = Date.now();
        }
        if (!rememberOnly) {
            video.currentTime = time;
        }
        lastRequests[++requestIndex % 3] = time * 100 | 0 / 100;
    }
    function isPlayerEnded(player) {
        return player.driver.currentTime >= player.video.duration;
    }
    function update(timeDiff) {
        var player = this;
        if (player.video.readyState >= player.video.HAVE_FUTURE_DATA) {
            if (!player.hasAudio) {
                player.driver.currentTime = player.video.currentTime + timeDiff * player.video.playbackRate / 1e3;
                if (player.video.loop && isPlayerEnded(player)) {
                    player.driver.currentTime = 0;
                }
            }
            setTime(player.video, player.driver.currentTime);
        } else if (player.video.networkState === player.video.NETWORK_IDLE && player.video.buffered.length === 0) {
            player.video.load();
        }
        if (player.video.ended) {
            delete player.video[IIVEvent];
            player.video.pause(true);
        }
    }
    function play() {
        var video = this;
        var player = video[IIV];
        if (video.webkitDisplayingFullscreen) {
            video[IIVPlay]();
            return;
        }
        if (player.driver.src !== "data:" && player.driver.src !== video.src) {
            setTime(video, 0, true);
            player.driver.src = video.src;
        }
        if (!video.paused) {
            return;
        }
        player.paused = false;
        if (video.buffered.length === 0) {
            video.load();
        }
        player.driver.play();
        player.updater.start();
        if (!player.hasAudio) {
            dispatchEventAsync(video, "play");
            if (player.video.readyState >= player.video.HAVE_ENOUGH_DATA) {
                dispatchEventAsync(video, "playing");
            }
        }
    }
    function pause(forceEvents) {
        var video = this;
        var player = video[IIV];
        player.driver.pause();
        player.updater.stop();
        if (video.webkitDisplayingFullscreen) {
            video[IIVPause]();
        }
        if (player.paused && !forceEvents) {
            return;
        }
        player.paused = true;
        if (!player.hasAudio) {
            dispatchEventAsync(video, "pause");
        }
        if (video.ended && !video.webkitDisplayingFullscreen) {
            video[IIVEvent] = true;
            dispatchEventAsync(video, "ended");
        }
    }
    function addPlayer(video, hasAudio) {
        var player = {};
        video[IIV] = player;
        player.paused = true;
        player.hasAudio = hasAudio;
        player.video = video;
        player.updater = frameIntervalometer(update.bind(player));
        if (hasAudio) {
            player.driver = getAudioFromVideo(video);
        } else {
            video.addEventListener("canplay", function() {
                if (!video.paused) {
                    dispatchEventAsync(video, "playing");
                }
            });
            player.driver = {
                src: video.src || video.currentSrc || "data:",
                muted: true,
                paused: true,
                pause: function() {
                    player.driver.paused = true;
                },
                play: function() {
                    player.driver.paused = false;
                    if (isPlayerEnded(player)) {
                        setTime(video, 0);
                    }
                },
                get ended() {
                    return isPlayerEnded(player);
                }
            };
        }
        video.addEventListener("emptied", function() {
            var wasEmpty = !player.driver.src || player.driver.src === "data:";
            if (player.driver.src && player.driver.src !== video.src) {
                setTime(video, 0, true);
                player.driver.src = video.src;
                if (wasEmpty || !hasAudio && video.autoplay) {
                    player.driver.play();
                } else {
                    player.updater.stop();
                }
            }
        }, false);
        video.addEventListener("webkitbeginfullscreen", function() {
            if (!video.paused) {
                video.pause();
                video[IIVPlay]();
            } else if (hasAudio && player.driver.buffered.length === 0) {
                player.driver.load();
            }
        });
        if (hasAudio) {
            video.addEventListener("webkitendfullscreen", function() {
                player.driver.currentTime = video.currentTime;
            });
            video.addEventListener("seeking", function() {
                if (lastRequests.indexOf(video.currentTime * 100 | 0 / 100) < 0) {
                    player.driver.currentTime = video.currentTime;
                }
            });
        }
    }
    function preventWithPropOrFullscreen(el) {
        var isAllowed = el[IIVEvent];
        delete el[IIVEvent];
        return !el.webkitDisplayingFullscreen && !isAllowed;
    }
    function overloadAPI(video) {
        var player = video[IIV];
        video[IIVPlay] = video.play;
        video[IIVPause] = video.pause;
        video.play = play;
        video.pause = pause;
        proxyProperty(video, "paused", player.driver);
        proxyProperty(video, "muted", player.driver, true);
        proxyProperty(video, "playbackRate", player.driver, true);
        proxyProperty(video, "ended", player.driver);
        proxyProperty(video, "loop", player.driver, true);
        preventEvent(video, "seeking", function(el) {
            return !el.webkitDisplayingFullscreen;
        });
        preventEvent(video, "seeked", function(el) {
            return !el.webkitDisplayingFullscreen;
        });
        preventEvent(video, "timeupdate", preventWithPropOrFullscreen);
        preventEvent(video, "ended", preventWithPropOrFullscreen);
    }
    function enableInlineVideo(video, opts) {
        if (opts === void 0) opts = {};
        if (video[IIV]) {
            return;
        }
        if (!opts.everywhere) {
            if (!iOS8or9) {
                return;
            }
            if (!(opts.iPad || opts.ipad ? /iPhone|iPod|iPad/ : /iPhone|iPod/).test(navigator.userAgent)) {
                return;
            }
        }
        video.pause();
        var willAutoplay = video.autoplay;
        video.autoplay = false;
        addPlayer(video, !video.muted);
        overloadAPI(video);
        video.classList.add("IIV");
        if (video.muted && willAutoplay) {
            video.play();
            video.addEventListener("playing", function restoreAutoplay() {
                video.autoplay = true;
                video.removeEventListener("playing", restoreAutoplay);
            });
        }
        if (!/iPhone|iPod|iPad/.test(navigator.platform)) {
            console.warn("iphone-inline-video is not guaranteed to work in emulated environments");
        }
    }
    return enableInlineVideo;
}();

!function(e, t) {
    "use strict";
    "object" == typeof module && "object" == typeof module.exports ? module.exports = t(e, document) : "function" == typeof define && define.amd ? define([], function() {
        return t(e, document);
    }) : e.plyr = t(e, document);
}("undefined" != typeof window ? window : this, function(e, t) {
    "use strict";
    function n() {
        var e, n, r, a = navigator.userAgent, s = navigator.appName, o = "" + parseFloat(navigator.appVersion), i = parseInt(navigator.appVersion, 10), l = !1, u = !1, c = !1, d = !1;
        return -1 !== navigator.appVersion.indexOf("Windows NT") && -1 !== navigator.appVersion.indexOf("rv:11") ? (l = !0, 
        s = "IE", o = "11") : -1 !== (n = a.indexOf("MSIE")) ? (l = !0, s = "IE", o = a.substring(n + 5)) : -1 !== (n = a.indexOf("Chrome")) ? (c = !0, 
        s = "Chrome", o = a.substring(n + 7)) : -1 !== (n = a.indexOf("Safari")) ? (d = !0, 
        s = "Safari", o = a.substring(n + 7), -1 !== (n = a.indexOf("Version")) && (o = a.substring(n + 8))) : -1 !== (n = a.indexOf("Firefox")) ? (u = !0, 
        s = "Firefox", o = a.substring(n + 8)) : (e = a.lastIndexOf(" ") + 1) < (n = a.lastIndexOf("/")) && (s = a.substring(e, n), 
        o = a.substring(n + 1), s.toLowerCase() === s.toUpperCase() && (s = navigator.appName)), 
        -1 !== (r = o.indexOf(";")) && (o = o.substring(0, r)), -1 !== (r = o.indexOf(" ")) && (o = o.substring(0, r)), 
        i = parseInt("" + o, 10), isNaN(i) && (o = "" + parseFloat(navigator.appVersion), 
        i = parseInt(navigator.appVersion, 10)), {
            name: s,
            version: i,
            isIE: l,
            isFirefox: u,
            isChrome: c,
            isSafari: d,
            isIos: /(iPad|iPhone|iPod)/g.test(navigator.platform),
            isIphone: /(iPhone|iPod)/g.test(navigator.userAgent),
            isTouch: "ontouchstart" in t.documentElement
        };
    }
    function r(e, t) {
        var n = e.media;
        if ("video" === e.type) switch (t) {
          case "video/webm":
            return !(!n.canPlayType || !n.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/no/, ""));

          case "video/mp4":
            return !(!n.canPlayType || !n.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"').replace(/no/, ""));

          case "video/ogg":
            return !(!n.canPlayType || !n.canPlayType('video/ogg; codecs="theora"').replace(/no/, ""));
        } else if ("audio" === e.type) switch (t) {
          case "audio/mpeg":
            return !(!n.canPlayType || !n.canPlayType("audio/mpeg;").replace(/no/, ""));

          case "audio/ogg":
            return !(!n.canPlayType || !n.canPlayType('audio/ogg; codecs="vorbis"').replace(/no/, ""));

          case "audio/wav":
            return !(!n.canPlayType || !n.canPlayType('audio/wav; codecs="1"').replace(/no/, ""));
        }
        return !1;
    }
    function a(e) {
        if (!t.querySelectorAll('script[src="' + e + '"]').length) {
            var n = t.createElement("script");
            n.src = e;
            var r = t.getElementsByTagName("script")[0];
            r.parentNode.insertBefore(n, r);
        }
    }
    function s(e, t) {
        return Array.prototype.indexOf && -1 !== e.indexOf(t);
    }
    function o(e, t, n) {
        return e.replace(new RegExp(t.replace(/([.*+?\^=!:${}()|\[\]\/\\])/g, "\\$1"), "g"), n);
    }
    function i(e, t) {
        e.length || (e = [ e ]);
        for (var n = e.length - 1; n >= 0; n--) {
            var r = n > 0 ? t.cloneNode(!0) : t, a = e[n], s = a.parentNode, o = a.nextSibling;
            return r.appendChild(a), o ? s.insertBefore(r, o) : s.appendChild(r), r;
        }
    }
    function l(e) {
        e && e.parentNode.removeChild(e);
    }
    function u(e, t) {
        e.insertBefore(t, e.firstChild);
    }
    function c(e, t) {
        for (var n in t) e.setAttribute(n, O.boolean(t[n]) && t[n] ? "" : t[n]);
    }
    function d(e, n, r) {
        var a = t.createElement(e);
        c(a, r), u(n, a);
    }
    function p(e) {
        return e.replace(".", "");
    }
    function m(e, t, n) {
        if (e) if (e.classList) e.classList[n ? "add" : "remove"](t); else {
            var r = (" " + e.className + " ").replace(/\s+/g, " ").replace(" " + t + " ", "");
            e.className = r + (n ? " " + t : "");
        }
    }
    function f(e, t) {
        return !!e && (e.classList ? e.classList.contains(t) : new RegExp("(\\s|^)" + t + "(\\s|$)").test(e.className));
    }
    function y(e, n) {
        var r = Element.prototype;
        return (r.matches || r.webkitMatchesSelector || r.mozMatchesSelector || r.msMatchesSelector || function(e) {
            return -1 !== [].indexOf.call(t.querySelectorAll(e), this);
        }).call(e, n);
    }
    function b(e, t, n, r, a) {
        n && g(e, t, function(t) {
            n.apply(e, [ t ]);
        }, a), g(e, t, function(t) {
            r.apply(e, [ t ]);
        }, a);
    }
    function v(e, t, n, r, a) {
        var s = t.split(" ");
        if (O.boolean(a) || (a = !1), e instanceof NodeList) for (var o = 0; o < e.length; o++) e[o] instanceof Node && v(e[o], arguments[1], arguments[2], arguments[3]); else for (var i = 0; i < s.length; i++) e[r ? "addEventListener" : "removeEventListener"](s[i], n, a);
    }
    function g(e, t, n, r) {
        e && v(e, t, n, !0, r);
    }
    function h(e, t, n, r) {
        e && v(e, t, n, !1, r);
    }
    function k(e, t, n, r) {
        if (e && t) {
            O.boolean(n) || (n = !1);
            var a = new CustomEvent(t, {
                bubbles: n,
                detail: r
            });
            e.dispatchEvent(a);
        }
    }
    function w(e, t) {
        if (e) return t = O.boolean(t) ? t : !e.getAttribute("aria-pressed"), e.setAttribute("aria-pressed", t), 
        t;
    }
    function x(e, t) {
        return 0 === e || 0 === t || isNaN(e) || isNaN(t) ? 0 : (e / t * 100).toFixed(2);
    }
    function T() {
        var e = arguments;
        if (e.length) {
            if (1 === e.length) return e[0];
            for (var t = Array.prototype.shift.call(e), n = e.length, r = 0; r < n; r++) {
                var a = e[r];
                for (var s in a) a[s] && a[s].constructor && a[s].constructor === Object ? (t[s] = t[s] || {}, 
                T(t[s], a[s])) : t[s] = a[s];
            }
            return t;
        }
    }
    function S(e) {
        return e.match(/^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/) ? RegExp.$2 : e;
    }
    function E(e) {
        return e.match(/^.*(vimeo.com\/|video\/)(\d+).*/) ? RegExp.$2 : e;
    }
    function _() {
        var e = {
            supportsFullScreen: !1,
            isFullScreen: function() {
                return !1;
            },
            requestFullScreen: function() {},
            cancelFullScreen: function() {},
            fullScreenEventName: "",
            element: null,
            prefix: ""
        }, n = "webkit o moz ms khtml".split(" ");
        if (O.undefined(t.cancelFullScreen)) for (var r = 0, a = n.length; r < a; r++) {
            if (e.prefix = n[r], !O.undefined(t[e.prefix + "CancelFullScreen"])) {
                e.supportsFullScreen = !0;
                break;
            }
            if (!O.undefined(t.msExitFullscreen) && t.msFullscreenEnabled) {
                e.prefix = "ms", e.supportsFullScreen = !0;
                break;
            }
        } else e.supportsFullScreen = !0;
        return e.supportsFullScreen && (e.fullScreenEventName = "ms" === e.prefix ? "MSFullscreenChange" : e.prefix + "fullscreenchange", 
        e.isFullScreen = function(e) {
            switch (O.undefined(e) && (e = t.body), this.prefix) {
              case "":
                return t.fullscreenElement === e;

              case "moz":
                return t.mozFullScreenElement === e;

              default:
                return t[this.prefix + "FullscreenElement"] === e;
            }
        }, e.requestFullScreen = function(e) {
            return O.undefined(e) && (e = t.body), "" === this.prefix ? e.requestFullScreen() : e[this.prefix + ("ms" === this.prefix ? "RequestFullscreen" : "RequestFullScreen")]();
        }, e.cancelFullScreen = function() {
            return "" === this.prefix ? t.cancelFullScreen() : t[this.prefix + ("ms" === this.prefix ? "ExitFullscreen" : "CancelFullScreen")]();
        }, e.element = function() {
            return "" === this.prefix ? t.fullscreenElement : t[this.prefix + "FullscreenElement"];
        }), e;
    }
    function C(v, C) {
        function j(e, t, n, r) {
            k(e, t, n, T({}, r, {
                plyr: We
            }));
        }
        function R(t, n) {
            C.debug && e.console && (n = Array.prototype.slice.call(n), O.string(C.logPrefix) && C.logPrefix.length && n.unshift(C.logPrefix), 
            console[t].apply(console, n));
        }
        function V() {
            return {
                url: C.iconUrl,
                absolute: 0 === C.iconUrl.indexOf("http") || Ye.browser.isIE && !e.svg4everybody
            };
        }
        function q() {
            var e = [], t = V(), n = (t.absolute ? "" : t.url) + "#" + C.iconPrefix;
            return s(C.controls, "play-large") && e.push('<button type="button" data-plyr="play" class="plyr__play-large">', '<svg><use xlink:href="' + n + '-play" /></svg>', '<span class="plyr__sr-only">' + C.i18n.play + "</span>", "</button>"), 
            e.push('<div class="plyr__controls">'), s(C.controls, "restart") && e.push('<button type="button" data-plyr="restart">', '<svg><use xlink:href="' + n + '-restart" /></svg>', '<span class="plyr__sr-only">' + C.i18n.restart + "</span>", "</button>"), 
            s(C.controls, "rewind") && e.push('<button type="button" data-plyr="rewind">', '<svg><use xlink:href="' + n + '-rewind" /></svg>', '<span class="plyr__sr-only">' + C.i18n.rewind + "</span>", "</button>"), 
            s(C.controls, "play") && e.push('<button type="button" data-plyr="play">', '<svg><use xlink:href="' + n + '-play" /></svg>', '<span class="plyr__sr-only">' + C.i18n.play + "</span>", "</button>", '<button type="button" data-plyr="pause">', '<svg><use xlink:href="' + n + '-pause" /></svg>', '<span class="plyr__sr-only">' + C.i18n.pause + "</span>", "</button>"), 
            s(C.controls, "fast-forward") && e.push('<button type="button" data-plyr="fast-forward">', '<svg><use xlink:href="' + n + '-fast-forward" /></svg>', '<span class="plyr__sr-only">' + C.i18n.forward + "</span>", "</button>"), 
            s(C.controls, "progress") && (e.push('<span class="plyr__progress">', '<label for="seek{id}" class="plyr__sr-only">Seek</label>', '<input id="seek{id}" class="plyr__progress--seek" type="range" min="0" max="100" step="0.1" value="0" data-plyr="seek">', '<progress class="plyr__progress--played" max="100" value="0" role="presentation"></progress>', '<progress class="plyr__progress--buffer" max="100" value="0">', "<span>0</span>% " + C.i18n.buffered, "</progress>"), 
            C.tooltips.seek && e.push('<span class="plyr__tooltip">00:00</span>'), e.push("</span>")), 
            s(C.controls, "current-time") && e.push('<span class="plyr__time">', '<span class="plyr__sr-only">' + C.i18n.currentTime + "</span>", '<span class="plyr__time--current">00:00</span>', "</span>"), 
            s(C.controls, "duration") && e.push('<span class="plyr__time">', '<span class="plyr__sr-only">' + C.i18n.duration + "</span>", '<span class="plyr__time--duration">00:00</span>', "</span>"), 
            s(C.controls, "mute") && e.push('<button type="button" data-plyr="mute">', '<svg class="icon--muted"><use xlink:href="' + n + '-muted" /></svg>', '<svg><use xlink:href="' + n + '-volume" /></svg>', '<span class="plyr__sr-only">' + C.i18n.toggleMute + "</span>", "</button>"), 
            s(C.controls, "volume") && e.push('<span class="plyr__volume">', '<label for="volume{id}" class="plyr__sr-only">' + C.i18n.volume + "</label>", '<input id="volume{id}" class="plyr__volume--input" type="range" min="' + C.volumeMin + '" max="' + C.volumeMax + '" value="' + C.volume + '" data-plyr="volume">', '<progress class="plyr__volume--display" max="' + C.volumeMax + '" value="' + C.volumeMin + '" role="presentation"></progress>', "</span>"), 
            s(C.controls, "captions") && e.push('<button type="button" data-plyr="captions">', '<svg class="icon--captions-on"><use xlink:href="' + n + '-captions-on" /></svg>', '<svg><use xlink:href="' + n + '-captions-off" /></svg>', '<span class="plyr__sr-only">' + C.i18n.toggleCaptions + "</span>", "</button>"), 
            s(C.controls, "fullscreen") && e.push('<button type="button" data-plyr="fullscreen">', '<svg class="icon--exit-fullscreen"><use xlink:href="' + n + '-exit-fullscreen" /></svg>', '<svg><use xlink:href="' + n + '-enter-fullscreen" /></svg>', '<span class="plyr__sr-only">' + C.i18n.toggleFullscreen + "</span>", "</button>"), 
            e.push("</div>"), e.join("");
        }
        function D() {
            if (Ye.supported.full && ("audio" !== Ye.type || C.fullscreen.allowAudio) && C.fullscreen.enabled) {
                var e = N.supportsFullScreen;
                e || C.fullscreen.fallback && !$() ? ($e((e ? "Native" : "Fallback") + " fullscreen enabled"), 
                e || m(Ye.container, C.classes.fullscreen.fallback, !0), m(Ye.container, C.classes.fullscreen.enabled, !0)) : $e("Fullscreen not supported and fallback disabled"), 
                Ye.buttons && Ye.buttons.fullscreen && w(Ye.buttons.fullscreen, !1), J();
            }
        }
        function H() {
            if ("video" === Ye.type) {
                X(C.selectors.captions) || Ye.videoContainer.insertAdjacentHTML("afterbegin", '<div class="' + p(C.selectors.captions) + '"></div>'), 
                Ye.usingTextTracks = !1, Ye.media.textTracks && (Ye.usingTextTracks = !0);
                for (var e, t = "", n = Ye.media.childNodes, r = 0; r < n.length; r++) "track" === n[r].nodeName.toLowerCase() && ("captions" !== (e = n[r].kind) && "subtitles" !== e || (t = n[r].getAttribute("src")));
                if (Ye.captionExists = !0, "" === t ? (Ye.captionExists = !1, $e("No caption track found")) : $e("Caption track found; URI: " + t), 
                Ye.captionExists) {
                    for (var a = Ye.media.textTracks, s = 0; s < a.length; s++) a[s].mode = "hidden";
                    if (Y(), (Ye.browser.isIE && Ye.browser.version >= 10 || Ye.browser.isFirefox && Ye.browser.version >= 31) && ($e("Detected browser with known TextTrack issues - using manual fallback"), 
                    Ye.usingTextTracks = !1), Ye.usingTextTracks) {
                        $e("TextTracks supported");
                        for (var o = 0; o < a.length; o++) {
                            var i = a[o];
                            "captions" !== i.kind && "subtitles" !== i.kind || g(i, "cuechange", function() {
                                this.activeCues[0] && "text" in this.activeCues[0] ? U(this.activeCues[0].getCueAsHTML()) : U();
                            });
                        }
                    } else if ($e("TextTracks not supported so rendering captions manually"), Ye.currentCaption = "", 
                    Ye.captions = [], "" !== t) {
                        var l = new XMLHttpRequest();
                        l.onreadystatechange = function() {
                            if (4 === l.readyState) if (200 === l.status) {
                                var e, t = [], n = l.responseText, r = "\r\n";
                                -1 === n.indexOf(r + r) && (r = -1 !== n.indexOf("\r\r") ? "\r" : "\n"), t = n.split(r + r);
                                for (var a = 0; a < t.length; a++) {
                                    e = t[a], Ye.captions[a] = [];
                                    var s = e.split(r), o = 0;
                                    -1 === s[o].indexOf(":") && (o = 1), Ye.captions[a] = [ s[o], s[o + 1] ];
                                }
                                Ye.captions.shift(), $e("Successfully loaded the caption file via AJAX");
                            } else Je(C.logPrefix + "There was a problem loading the caption file via AJAX");
                        }, l.open("get", t, !0), l.send();
                    }
                } else m(Ye.container, C.classes.captions.enabled);
            }
        }
        function U(e) {
            var n = X(C.selectors.captions), r = t.createElement("span");
            n.innerHTML = "", O.undefined(e) && (e = ""), O.string(e) ? r.innerHTML = e.trim() : r.appendChild(e), 
            n.appendChild(r);
            n.offsetHeight;
        }
        function W(e) {
            function t(e, t) {
                var n = [];
                n = e.split(" --\x3e ");
                for (var a = 0; a < n.length; a++) n[a] = n[a].replace(/(\d+:\d+:\d+\.\d+).*/, "$1");
                return r(n[t]);
            }
            function n(e) {
                return t(e, 1);
            }
            function r(e) {
                if (null === e || void 0 === e) return 0;
                var t = [], n = [];
                return t = e.split(","), n = t[0].split(":"), Math.floor(60 * n[0] * 60) + Math.floor(60 * n[1]) + Math.floor(n[2]);
            }
            if (!Ye.usingTextTracks && "video" === Ye.type && Ye.supported.full && (Ye.subcount = 0, 
            e = O.number(e) ? e : Ye.media.currentTime, Ye.captions[Ye.subcount])) {
                for (;n(Ye.captions[Ye.subcount][0]) < e.toFixed(1); ) if (Ye.subcount++, Ye.subcount > Ye.captions.length - 1) {
                    Ye.subcount = Ye.captions.length - 1;
                    break;
                }
                Ye.media.currentTime.toFixed(1) >= function(e) {
                    return t(e, 0);
                }(Ye.captions[Ye.subcount][0]) && Ye.media.currentTime.toFixed(1) <= n(Ye.captions[Ye.subcount][0]) ? (Ye.currentCaption = Ye.captions[Ye.subcount][1], 
                U(Ye.currentCaption)) : U();
            }
        }
        function Y() {
            if (Ye.buttons.captions) {
                m(Ye.container, C.classes.captions.enabled, !0);
                var e = Ye.storage.captionsEnabled;
                O.boolean(e) || (e = C.captions.defaultActive), e && (m(Ye.container, C.classes.captions.active, !0), 
                w(Ye.buttons.captions, !0));
            }
        }
        function B(e) {
            return Ye.container.querySelectorAll(e);
        }
        function X(e) {
            return B(e)[0];
        }
        function $() {
            try {
                return e.self !== e.top;
            } catch (e) {
                return !0;
            }
        }
        function J() {
            var e = B("input:not([disabled]), button:not([disabled])"), t = e[0], n = e[e.length - 1];
            g(Ye.container, "keydown", function(e) {
                9 === e.which && Ye.isFullscreen && (e.target !== n || e.shiftKey ? e.target === t && e.shiftKey && (e.preventDefault(), 
                n.focus()) : (e.preventDefault(), t.focus()));
            });
        }
        function z(e, t) {
            if (O.string(t)) d(e, Ye.media, {
                src: t
            }); else if (t.constructor === Array) for (var n = t.length - 1; n >= 0; n--) d(e, Ye.media, t[n]);
        }
        function G() {
            if (C.loadSprite) {
                var e = V();
                e.absolute ? ($e("AJAX loading absolute SVG sprite" + (Ye.browser.isIE ? " (due to IE)" : "")), 
                F(e.url, "sprite-plyr")) : $e("Sprite will be used as external resource directly");
            }
            var n = C.html;
            $e("Injecting custom controls"), n || (n = q()), n = o(n = o(n, "{seektime}", C.seekTime), "{id}", Math.floor(1e4 * Math.random())), 
            C.title && (n = o(n, "{title}", C.title));
            var r;
            if (O.string(C.selectors.controls.container) && (r = t.querySelector(C.selectors.controls.container)), 
            O.htmlElement(r) || (r = Ye.container), r.insertAdjacentHTML("beforeend", n), C.tooltips.controls) for (var a = B([ C.selectors.controls.wrapper, " ", C.selectors.labels, " .", C.classes.hidden ].join("")), s = a.length - 1; s >= 0; s--) {
                var i = a[s];
                m(i, C.classes.hidden, !1), m(i, C.classes.tooltip, !0);
            }
        }
        function K() {
            try {
                return Ye.controls = X(C.selectors.controls.wrapper), Ye.buttons = {}, Ye.buttons.seek = X(C.selectors.buttons.seek), 
                Ye.buttons.play = B(C.selectors.buttons.play), Ye.buttons.pause = X(C.selectors.buttons.pause), 
                Ye.buttons.restart = X(C.selectors.buttons.restart), Ye.buttons.rewind = X(C.selectors.buttons.rewind), 
                Ye.buttons.forward = X(C.selectors.buttons.forward), Ye.buttons.fullscreen = X(C.selectors.buttons.fullscreen), 
                Ye.buttons.mute = X(C.selectors.buttons.mute), Ye.buttons.captions = X(C.selectors.buttons.captions), 
                Ye.progress = {}, Ye.progress.container = X(C.selectors.progress.container), Ye.progress.buffer = {}, 
                Ye.progress.buffer.bar = X(C.selectors.progress.buffer), Ye.progress.buffer.text = Ye.progress.buffer.bar && Ye.progress.buffer.bar.getElementsByTagName("span")[0], 
                Ye.progress.played = X(C.selectors.progress.played), Ye.progress.tooltip = Ye.progress.container && Ye.progress.container.querySelector("." + C.classes.tooltip), 
                Ye.volume = {}, Ye.volume.input = X(C.selectors.volume.input), Ye.volume.display = X(C.selectors.volume.display), 
                Ye.duration = X(C.selectors.duration), Ye.currentTime = X(C.selectors.currentTime), 
                Ye.seekTime = B(C.selectors.seekTime), !0;
            } catch (e) {
                return Je("It looks like there is a problem with your controls HTML"), Z(!0), !1;
            }
        }
        function Q() {
            m(Ye.container, C.selectors.container.replace(".", ""), Ye.supported.full);
        }
        function Z(e) {
            e && s(C.types.html5, Ye.type) ? Ye.media.setAttribute("controls", "") : Ye.media.removeAttribute("controls");
        }
        function ee(e) {
            var t = C.i18n.play;
            if (O.string(C.title) && C.title.length && (t += ", " + C.title, Ye.container.setAttribute("aria-label", C.title)), 
            Ye.supported.full && Ye.buttons.play) for (var n = Ye.buttons.play.length - 1; n >= 0; n--) Ye.buttons.play[n].setAttribute("aria-label", t);
            O.htmlElement(e) && e.setAttribute("title", C.i18n.frameTitle.replace("{title}", C.title));
        }
        function te() {
            var t = null;
            Ye.storage = {}, L.supported && C.storage.enabled && (e.localStorage.removeItem("plyr-volume"), 
            (t = e.localStorage.getItem(C.storage.key)) && (/^\d+(\.\d+)?$/.test(t) ? ne({
                volume: parseFloat(t)
            }) : Ye.storage = JSON.parse(t)));
        }
        function ne(t) {
            L.supported && C.storage.enabled && (T(Ye.storage, t), e.localStorage.setItem(C.storage.key, JSON.stringify(Ye.storage)));
        }
        function re() {
            if (Ye.media) {
                if (Ye.supported.full && (m(Ye.container, C.classes.type.replace("{0}", Ye.type), !0), 
                s(C.types.embed, Ye.type) && m(Ye.container, C.classes.type.replace("{0}", "video"), !0), 
                m(Ye.container, C.classes.stopped, C.autoplay), m(Ye.container, C.classes.isIos, Ye.browser.isIos), 
                m(Ye.container, C.classes.isTouch, Ye.browser.isTouch), "video" === Ye.type)) {
                    var e = t.createElement("div");
                    e.setAttribute("class", C.classes.videoWrapper), i(Ye.media, e), Ye.videoContainer = e;
                }
                s(C.types.embed, Ye.type) && ae();
            } else Je("No media element found!");
        }
        function ae() {
            var n, r = t.createElement("div"), s = Ye.type + "-" + Math.floor(1e4 * Math.random());
            switch (Ye.type) {
              case "youtube":
                n = S(Ye.embedId);
                break;

              case "vimeo":
                n = E(Ye.embedId);
                break;

              default:
                n = Ye.embedId;
            }
            for (var o = B('[id^="' + Ye.type + '-"]'), i = o.length - 1; i >= 0; i--) l(o[i]);
            if (m(Ye.media, C.classes.videoWrapper, !0), m(Ye.media, C.classes.embedWrapper, !0), 
            "youtube" === Ye.type) Ye.media.appendChild(r), r.setAttribute("id", s), O.object(e.YT) ? oe(n, r) : (a(C.urls.youtube.api), 
            e.onYouTubeReadyCallbacks = e.onYouTubeReadyCallbacks || [], e.onYouTubeReadyCallbacks.push(function() {
                oe(n, r);
            }), e.onYouTubeIframeAPIReady = function() {
                e.onYouTubeReadyCallbacks.forEach(function(e) {
                    e();
                });
            }); else if ("vimeo" === Ye.type) if (Ye.supported.full ? Ye.media.appendChild(r) : r = Ye.media, 
            r.setAttribute("id", s), O.object(e.Vimeo)) ie(n, r); else {
                a(C.urls.vimeo.api);
                var u = e.setInterval(function() {
                    O.object(e.Vimeo) && (e.clearInterval(u), ie(n, r));
                }, 50);
            } else if ("soundcloud" === Ye.type) {
                var d = t.createElement("iframe");
                d.loaded = !1, g(d, "load", function() {
                    d.loaded = !0;
                }), c(d, {
                    src: "https://w.soundcloud.com/player/?url=https://api.soundcloud.com/tracks/" + n,
                    id: s
                }), r.appendChild(d), Ye.media.appendChild(r), e.SC || a(C.urls.soundcloud.api);
                var p = e.setInterval(function() {
                    e.SC && d.loaded && (e.clearInterval(p), le.call(d));
                }, 50);
            }
        }
        function se() {
            Ye.supported.full && (He(), Ue()), ee(X("iframe"));
        }
        function oe(t, n) {
            Ye.embed = new e.YT.Player(n.id, {
                videoId: t,
                playerVars: {
                    autoplay: C.autoplay ? 1 : 0,
                    controls: Ye.supported.full ? 0 : 1,
                    rel: 0,
                    showinfo: 0,
                    iv_load_policy: 3,
                    cc_load_policy: C.captions.defaultActive ? 1 : 0,
                    cc_lang_pref: "en",
                    wmode: "transparent",
                    modestbranding: 1,
                    disablekb: 1,
                    origin: "*"
                },
                events: {
                    onError: function(e) {
                        j(Ye.container, "error", !0, {
                            code: e.data,
                            embed: e.target
                        });
                    },
                    onReady: function(t) {
                        var n = t.target;
                        Ye.media.play = function() {
                            n.playVideo(), Ye.media.paused = !1;
                        }, Ye.media.pause = function() {
                            n.pauseVideo(), Ye.media.paused = !0;
                        }, Ye.media.stop = function() {
                            n.stopVideo(), Ye.media.paused = !0;
                        }, Ye.media.duration = n.getDuration(), Ye.media.paused = !0, Ye.media.currentTime = 0, 
                        Ye.media.muted = n.isMuted(), "function" == typeof n.getVideoData && (C.title = n.getVideoData().title), 
                        Ye.supported.full && Ye.media.querySelector("iframe").setAttribute("tabindex", "-1"), 
                        se(), j(Ye.media, "timeupdate"), j(Ye.media, "durationchange"), e.clearInterval(Be.buffering), 
                        Be.buffering = e.setInterval(function() {
                            Ye.media.buffered = n.getVideoLoadedFraction(), (null === Ye.media.lastBuffered || Ye.media.lastBuffered < Ye.media.buffered) && j(Ye.media, "progress"), 
                            Ye.media.lastBuffered = Ye.media.buffered, 1 === Ye.media.buffered && (e.clearInterval(Be.buffering), 
                            j(Ye.media, "canplaythrough"));
                        }, 200);
                    },
                    onStateChange: function(t) {
                        var n = t.target;
                        switch (e.clearInterval(Be.playing), t.data) {
                          case 0:
                            Ye.media.paused = !0, j(Ye.media, "ended");
                            break;

                          case 1:
                            Ye.media.paused = !1, Ye.media.seeking && j(Ye.media, "seeked"), Ye.media.seeking = !1, 
                            j(Ye.media, "play"), j(Ye.media, "playing"), Be.playing = e.setInterval(function() {
                                Ye.media.currentTime = n.getCurrentTime(), j(Ye.media, "timeupdate");
                            }, 100), Ye.media.duration !== n.getDuration() && (Ye.media.duration = n.getDuration(), 
                            j(Ye.media, "durationchange"));
                            break;

                          case 2:
                            Ye.media.paused = !0, j(Ye.media, "pause");
                        }
                        j(Ye.container, "statechange", !1, {
                            code: t.data
                        });
                    }
                }
            });
        }
        function ie(n, r) {
            var a = function(e) {
                return Object.keys(e).map(function(t) {
                    return encodeURIComponent(t) + "=" + encodeURIComponent(e[t]);
                }).join("&");
            }({
                loop: C.loop,
                autoplay: C.autoplay,
                byline: !1,
                portrait: !1,
                title: !1,
                speed: !0,
                transparent: 0
            }), s = t.createElement("iframe"), o = "https://player.vimeo.com/video/" + n + "?" + a;
            s.setAttribute("src", o), s.setAttribute("allowfullscreen", ""), r.appendChild(s), 
            Ye.embed = new e.Vimeo.Player(s), Ye.media.play = function() {
                Ye.embed.play(), Ye.media.paused = !1;
            }, Ye.media.pause = function() {
                Ye.embed.pause(), Ye.media.paused = !0;
            }, Ye.media.stop = function() {
                Ye.embed.stop(), Ye.media.paused = !0;
            }, Ye.media.paused = !0, Ye.media.currentTime = 0, se(), Ye.embed.getCurrentTime().then(function(e) {
                Ye.media.currentTime = e, j(Ye.media, "timeupdate");
            }), Ye.embed.getDuration().then(function(e) {
                Ye.media.duration = e, j(Ye.media, "durationchange");
            }), Ye.embed.on("loaded", function() {
                O.htmlElement(Ye.embed.element) && Ye.supported.full && Ye.embed.element.setAttribute("tabindex", "-1");
            }), Ye.embed.on("play", function() {
                Ye.media.paused = !1, j(Ye.media, "play"), j(Ye.media, "playing");
            }), Ye.embed.on("pause", function() {
                Ye.media.paused = !0, j(Ye.media, "pause");
            }), Ye.embed.on("timeupdate", function(e) {
                Ye.media.seeking = !1, Ye.media.currentTime = e.seconds, j(Ye.media, "timeupdate");
            }), Ye.embed.on("progress", function(e) {
                Ye.media.buffered = e.percent, j(Ye.media, "progress"), 1 === parseInt(e.percent) && j(Ye.media, "canplaythrough");
            }), Ye.embed.on("seeked", function() {
                Ye.media.seeking = !1, j(Ye.media, "seeked"), j(Ye.media, "play");
            }), Ye.embed.on("ended", function() {
                Ye.media.paused = !0, j(Ye.media, "ended");
            });
        }
        function le() {
            Ye.embed = e.SC.Widget(this), Ye.embed.bind(e.SC.Widget.Events.READY, function() {
                Ye.media.play = function() {
                    Ye.embed.play(), Ye.media.paused = !1;
                }, Ye.media.pause = function() {
                    Ye.embed.pause(), Ye.media.paused = !0;
                }, Ye.media.stop = function() {
                    Ye.embed.seekTo(0), Ye.embed.pause(), Ye.media.paused = !0;
                }, Ye.media.paused = !0, Ye.media.currentTime = 0, Ye.embed.getDuration(function(e) {
                    Ye.media.duration = e / 1e3, se();
                }), Ye.embed.getPosition(function(e) {
                    Ye.media.currentTime = e, j(Ye.media, "timeupdate");
                }), Ye.embed.bind(e.SC.Widget.Events.PLAY, function() {
                    Ye.media.paused = !1, j(Ye.media, "play"), j(Ye.media, "playing");
                }), Ye.embed.bind(e.SC.Widget.Events.PAUSE, function() {
                    Ye.media.paused = !0, j(Ye.media, "pause");
                }), Ye.embed.bind(e.SC.Widget.Events.PLAY_PROGRESS, function(e) {
                    Ye.media.seeking = !1, Ye.media.currentTime = e.currentPosition / 1e3, j(Ye.media, "timeupdate");
                }), Ye.embed.bind(e.SC.Widget.Events.LOAD_PROGRESS, function(e) {
                    Ye.media.buffered = e.loadProgress, j(Ye.media, "progress"), 1 === parseInt(e.loadProgress) && j(Ye.media, "canplaythrough");
                }), Ye.embed.bind(e.SC.Widget.Events.FINISH, function() {
                    Ye.media.paused = !0, j(Ye.media, "ended");
                });
            });
        }
        function ue() {
            "play" in Ye.media && Ye.media.play();
        }
        function ce() {
            "pause" in Ye.media && Ye.media.pause();
        }
        function de(e) {
            return O.boolean(e) || (e = Ye.media.paused), e ? ue() : ce(), e;
        }
        function pe(e) {
            O.number(e) || (e = C.seekTime), fe(Ye.media.currentTime - e);
        }
        function me(e) {
            O.number(e) || (e = C.seekTime), fe(Ye.media.currentTime + e);
        }
        function fe(e) {
            var t = 0, n = Ye.media.paused, r = ye();
            O.number(e) ? t = e : O.object(e) && s([ "input", "change" ], e.type) && (t = e.target.value / e.target.max * r), 
            t < 0 ? t = 0 : t > r && (t = r), Pe(t);
            try {
                Ye.media.currentTime = t.toFixed(4);
            } catch (e) {}
            if (s(C.types.embed, Ye.type)) {
                switch (Ye.type) {
                  case "youtube":
                    Ye.embed.seekTo(t);
                    break;

                  case "vimeo":
                    Ye.embed.setCurrentTime(t.toFixed(0));
                    break;

                  case "soundcloud":
                    Ye.embed.seekTo(1e3 * t);
                }
                n && ce(), j(Ye.media, "timeupdate"), Ye.media.seeking = !0, j(Ye.media, "seeking");
            }
            $e("Seeking to " + Ye.media.currentTime + " seconds"), W(t);
        }
        function ye() {
            var e = parseInt(C.duration), t = 0;
            return null === Ye.media.duration || isNaN(Ye.media.duration) || (t = Ye.media.duration), 
            isNaN(e) ? t : e;
        }
        function be() {
            m(Ye.container, C.classes.playing, !Ye.media.paused), m(Ye.container, C.classes.stopped, Ye.media.paused), 
            Oe(Ye.media.paused);
        }
        function ve() {
            P = {
                x: e.pageXOffset || 0,
                y: e.pageYOffset || 0
            };
        }
        function ge() {
            e.scrollTo(P.x, P.y);
        }
        function he(e) {
            var n = N.supportsFullScreen;
            if (n) {
                if (!e || e.type !== N.fullScreenEventName) return N.isFullScreen(Ye.container) ? N.cancelFullScreen() : (ve(), 
                N.requestFullScreen(Ye.container)), void (Ye.isFullscreen = N.isFullScreen(Ye.container));
                Ye.isFullscreen = N.isFullScreen(Ye.container);
            } else Ye.isFullscreen = !Ye.isFullscreen, t.body.style.overflow = Ye.isFullscreen ? "hidden" : "";
            m(Ye.container, C.classes.fullscreen.active, Ye.isFullscreen), J(Ye.isFullscreen), 
            Ye.buttons && Ye.buttons.fullscreen && w(Ye.buttons.fullscreen, Ye.isFullscreen), 
            j(Ye.container, Ye.isFullscreen ? "enterfullscreen" : "exitfullscreen", !0), !Ye.isFullscreen && n && ge();
        }
        function ke(e) {
            if (O.boolean(e) || (e = !Ye.media.muted), w(Ye.buttons.mute, e), Ye.media.muted = e, 
            0 === Ye.media.volume && we(C.volume), s(C.types.embed, Ye.type)) {
                switch (Ye.type) {
                  case "youtube":
                    Ye.embed[Ye.media.muted ? "mute" : "unMute"]();
                    break;

                  case "vimeo":
                  case "soundcloud":
                    Ye.embed.setVolume(Ye.media.muted ? 0 : parseFloat(C.volume / C.volumeMax));
                }
                j(Ye.media, "volumechange");
            }
        }
        function we(e) {
            var t = C.volumeMax, n = C.volumeMin;
            if (O.undefined(e) && (e = Ye.storage.volume), (null === e || isNaN(e)) && (e = C.volume), 
            e > t && (e = t), e < n && (e = n), Ye.media.volume = parseFloat(e / t), Ye.volume.display && (Ye.volume.display.value = e), 
            s(C.types.embed, Ye.type)) {
                switch (Ye.type) {
                  case "youtube":
                    Ye.embed.setVolume(100 * Ye.media.volume);
                    break;

                  case "vimeo":
                  case "soundcloud":
                    Ye.embed.setVolume(Ye.media.volume);
                }
                j(Ye.media, "volumechange");
            }
            0 === e ? Ye.media.muted = !0 : Ye.media.muted && e > 0 && ke();
        }
        function xe(e) {
            var t = Ye.media.muted ? 0 : Ye.media.volume * C.volumeMax;
            O.number(e) || (e = C.volumeStep), we(t + e);
        }
        function Te(e) {
            var t = Ye.media.muted ? 0 : Ye.media.volume * C.volumeMax;
            O.number(e) || (e = C.volumeStep), we(t - e);
        }
        function Se() {
            var e = Ye.media.muted ? 0 : Ye.media.volume * C.volumeMax;
            Ye.supported.full && (Ye.volume.input && (Ye.volume.input.value = e), Ye.volume.display && (Ye.volume.display.value = e)), 
            ne({
                volume: e
            }), m(Ye.container, C.classes.muted, 0 === e), Ye.supported.full && Ye.buttons.mute && w(Ye.buttons.mute, 0 === e);
        }
        function Ee(e) {
            Ye.supported.full && Ye.buttons.captions && (O.boolean(e) || (e = -1 === Ye.container.className.indexOf(C.classes.captions.active)), 
            Ye.captionsEnabled = e, w(Ye.buttons.captions, Ye.captionsEnabled), m(Ye.container, C.classes.captions.active, Ye.captionsEnabled), 
            j(Ye.container, Ye.captionsEnabled ? "captionsenabled" : "captionsdisabled", !0), 
            ne({
                captionsEnabled: Ye.captionsEnabled
            }));
        }
        function _e(e) {
            var t = "waiting" === e.type;
            clearTimeout(Be.loading), Be.loading = setTimeout(function() {
                m(Ye.container, C.classes.loading, t), Oe(t);
            }, t ? 250 : 0);
        }
        function Ce(e) {
            if (Ye.supported.full) {
                var t = Ye.progress.played, n = 0, r = ye();
                if (e) switch (e.type) {
                  case "timeupdate":
                  case "seeking":
                    if (Ye.controls.pressed) return;
                    n = x(Ye.media.currentTime, r), "timeupdate" === e.type && Ye.buttons.seek && (Ye.buttons.seek.value = n);
                    break;

                  case "playing":
                  case "progress":
                    t = Ye.progress.buffer, n = function() {
                        var e = Ye.media.buffered;
                        return e && e.length ? x(e.end(0), r) : O.number(e) ? 100 * e : 0;
                    }();
                }
                Fe(t, n);
            }
        }
        function Fe(e, t) {
            if (Ye.supported.full) {
                if (O.undefined(t) && (t = 0), O.undefined(e)) {
                    if (!Ye.progress || !Ye.progress.buffer) return;
                    e = Ye.progress.buffer;
                }
                O.htmlElement(e) ? e.value = t : e && (e.bar && (e.bar.value = t), e.text && (e.text.innerHTML = t));
            }
        }
        function Ae(e, t) {
            if (t) {
                isNaN(e) && (e = 0), Ye.secs = parseInt(e % 60), Ye.mins = parseInt(e / 60 % 60), 
                Ye.hours = parseInt(e / 60 / 60 % 60);
                var n = parseInt(ye() / 60 / 60 % 60) > 0;
                Ye.secs = ("0" + Ye.secs).slice(-2), Ye.mins = ("0" + Ye.mins).slice(-2), t.innerHTML = (n ? Ye.hours + ":" : "") + Ye.mins + ":" + Ye.secs;
            }
        }
        function Ie() {
            if (Ye.supported.full) {
                var e = ye() || 0;
                !Ye.duration && C.displayDuration && Ye.media.paused && Ae(e, Ye.currentTime), Ye.duration && Ae(e, Ye.duration), 
                Me();
            }
        }
        function Ne(e) {
            Ae(Ye.media.currentTime, Ye.currentTime), e && "timeupdate" === e.type && Ye.media.seeking || Ce(e);
        }
        function Pe(e) {
            O.number(e) || (e = 0);
            var t = x(e, ye());
            Ye.progress && Ye.progress.played && (Ye.progress.played.value = t), Ye.buttons && Ye.buttons.seek && (Ye.buttons.seek.value = t);
        }
        function Me(e) {
            var t = ye();
            if (C.tooltips.seek && Ye.progress.container && 0 !== t) {
                var n = Ye.progress.container.getBoundingClientRect(), r = 0, a = C.classes.tooltip + "--visible";
                if (e) r = 100 / n.width * (e.pageX - n.left); else {
                    if (!f(Ye.progress.tooltip, a)) return;
                    r = Ye.progress.tooltip.style.left.replace("%", "");
                }
                r < 0 ? r = 0 : r > 100 && (r = 100), Ae(t / 100 * r, Ye.progress.tooltip), Ye.progress.tooltip.style.left = r + "%", 
                e && s([ "mouseenter", "mouseleave" ], e.type) && m(Ye.progress.tooltip, a, "mouseenter" === e.type);
            }
        }
        function Oe(t) {
            if (C.hideControls && "audio" !== Ye.type) {
                var n = 0, r = !1, a = t, o = f(Ye.container, C.classes.loading);
                if (O.boolean(t) || (t && t.type ? (r = "enterfullscreen" === t.type, a = s([ "mousemove", "touchstart", "mouseenter", "focus" ], t.type), 
                s([ "mousemove", "touchmove" ], t.type) && (n = 2e3), "focus" === t.type && (n = 3e3)) : a = f(Ye.container, C.classes.hideControls)), 
                e.clearTimeout(Be.hover), a || Ye.media.paused || o) {
                    if (m(Ye.container, C.classes.hideControls, !1), Ye.media.paused || o) return;
                    Ye.browser.isTouch && (n = 3e3);
                }
                a && Ye.media.paused || (Be.hover = e.setTimeout(function() {
                    (!Ye.controls.pressed && !Ye.controls.hover || r) && m(Ye.container, C.classes.hideControls, !0);
                }, n));
            }
        }
        function Le(e) {
            O.object(e) && "sources" in e && e.sources.length ? (m(Ye.container, C.classes.ready, !1), 
            ce(), Pe(), Fe(), qe(), De(function() {
                if (Ye.embed = null, l(Ye.media), "video" === Ye.type && Ye.videoContainer && l(Ye.videoContainer), 
                Ye.container && Ye.container.removeAttribute("class"), "type" in e && (Ye.type = e.type, 
                "video" === Ye.type)) {
                    var n = e.sources[0];
                    "type" in n && s(C.types.embed, n.type) && (Ye.type = n.type);
                }
                switch (Ye.supported = A(Ye.type), Ye.type) {
                  case "video":
                    Ye.media = t.createElement("video");
                    break;

                  case "audio":
                    Ye.media = t.createElement("audio");
                    break;

                  case "youtube":
                  case "vimeo":
                  case "soundcloud":
                    Ye.media = t.createElement("div"), Ye.embedId = e.sources[0].src;
                }
                u(Ye.container, Ye.media), O.boolean(e.autoplay) && (C.autoplay = e.autoplay), s(C.types.html5, Ye.type) && (C.crossorigin && Ye.media.setAttribute("crossorigin", ""), 
                C.autoplay && Ye.media.setAttribute("autoplay", ""), "poster" in e && Ye.media.setAttribute("poster", e.poster), 
                C.loop && Ye.media.setAttribute("loop", "")), m(Ye.container, C.classes.fullscreen.active, Ye.isFullscreen), 
                m(Ye.container, C.classes.captions.active, Ye.captionsEnabled), Q(), s(C.types.html5, Ye.type) && z("source", e.sources), 
                re(), s(C.types.html5, Ye.type) && ("tracks" in e && z("track", e.tracks), Ye.media.load()), 
                (s(C.types.html5, Ye.type) || s(C.types.embed, Ye.type) && !Ye.supported.full) && (He(), 
                Ue()), C.title = e.title, ee();
            }, !1)) : Je("Invalid source format");
        }
        function je() {
            m(X("." + C.classes.tabFocus), C.classes.tabFocus, !1);
        }
        function Re() {
            function n() {
                var e = de(), t = Ye.buttons[e ? "play" : "pause"], n = Ye.buttons[e ? "pause" : "play"];
                if (n && (n = n.length > 1 ? n[n.length - 1] : n[0]), n) {
                    var r = f(t, C.classes.tabFocus);
                    setTimeout(function() {
                        n.focus(), r && (m(t, C.classes.tabFocus, !1), m(n, C.classes.tabFocus, !0));
                    }, 100);
                }
            }
            function r() {
                var e = t.activeElement;
                return e = e && e !== t.body ? t.querySelector(":focus") : null;
            }
            function a(e) {
                return e.keyCode ? e.keyCode : e.which;
            }
            function o(e) {
                for (var t in Ye.buttons) {
                    var n = Ye.buttons[t];
                    if (O.nodeList(n)) for (var r = 0; r < n.length; r++) m(n[r], C.classes.tabFocus, n[r] === e); else m(n, C.classes.tabFocus, n === e);
                }
            }
            function i(e) {
                var t = a(e), n = "keydown" === e.type, r = n && t === u;
                if (O.number(t)) if (n) {
                    switch (s([ 48, 49, 50, 51, 52, 53, 54, 56, 57, 32, 75, 38, 40, 77, 39, 37, 70, 67 ], t) && (e.preventDefault(), 
                    e.stopPropagation()), t) {
                      case 48:
                      case 49:
                      case 50:
                      case 51:
                      case 52:
                      case 53:
                      case 54:
                      case 55:
                      case 56:
                      case 57:
                        r || function() {
                            var e = Ye.media.duration;
                            O.number(e) && fe(e / 10 * (t - 48));
                        }();
                        break;

                      case 32:
                      case 75:
                        r || de();
                        break;

                      case 38:
                        xe();
                        break;

                      case 40:
                        Te();
                        break;

                      case 77:
                        r || ke();
                        break;

                      case 39:
                        me();
                        break;

                      case 37:
                        pe();
                        break;

                      case 70:
                        he();
                        break;

                      case 67:
                        r || Ee();
                    }
                    !N.supportsFullScreen && Ye.isFullscreen && 27 === t && he(), u = t;
                } else u = null;
            }
            var l = Ye.browser.isIE ? "change" : "input";
            if (C.keyboardShorcuts.focused) {
                var u = null;
                C.keyboardShorcuts.global && g(e, "keydown keyup", function(e) {
                    var t = a(e), n = r();
                    1 !== I().length || !s([ 48, 49, 50, 51, 52, 53, 54, 56, 57, 75, 77, 70, 67 ], t) || O.htmlElement(n) && y(n, C.selectors.editable) || i(e);
                }), g(Ye.container, "keydown keyup", i);
            }
            g(e, "keyup", function(e) {
                var t = a(e), n = r();
                9 === t && o(n);
            }), g(t.body, "click", je);
            for (var c in Ye.buttons) {
                var d = Ye.buttons[c];
                g(d, "blur", function() {
                    m(d, "tab-focus", !1);
                });
            }
            b(Ye.buttons.play, "click", C.listeners.play, n), b(Ye.buttons.pause, "click", C.listeners.pause, n), 
            b(Ye.buttons.restart, "click", C.listeners.restart, fe), b(Ye.buttons.rewind, "click", C.listeners.rewind, pe), 
            b(Ye.buttons.forward, "click", C.listeners.forward, me), b(Ye.buttons.seek, l, C.listeners.seek, fe), 
            b(Ye.volume.input, l, C.listeners.volume, function() {
                we(Ye.volume.input.value);
            }), b(Ye.buttons.mute, "click", C.listeners.mute, ke), b(Ye.buttons.fullscreen, "click", C.listeners.fullscreen, he), 
            N.supportsFullScreen && g(t, N.fullScreenEventName, he), b(Ye.buttons.captions, "click", C.listeners.captions, Ee), 
            g(Ye.progress.container, "mouseenter mouseleave mousemove", Me), C.hideControls && (g(Ye.container, "mouseenter mouseleave mousemove touchstart touchend touchcancel touchmove enterfullscreen", Oe), 
            g(Ye.controls, "mouseenter mouseleave", function(e) {
                Ye.controls.hover = "mouseenter" === e.type;
            }), g(Ye.controls, "mousedown mouseup touchstart touchend touchcancel", function(e) {
                Ye.controls.pressed = s([ "mousedown", "touchstart" ], e.type);
            }), g(Ye.controls, "focus blur", Oe, !0)), g(Ye.volume.input, "wheel", function(e) {
                e.preventDefault();
                var t = e.webkitDirectionInvertedFromDevice, n = C.volumeStep / 5;
                (e.deltaY < 0 || e.deltaX > 0) && (t ? Te(n) : xe(n)), (e.deltaY > 0 || e.deltaX < 0) && (t ? xe(n) : Te(n));
            });
        }
        function Ve() {
            if (g(Ye.media, "timeupdate seeking", Ne), g(Ye.media, "timeupdate", W), g(Ye.media, "durationchange loadedmetadata", Ie), 
            g(Ye.media, "ended", function() {
                "video" === Ye.type && C.showPosterOnEnd && ("video" === Ye.type && U(), fe(), Ye.media.load());
            }), g(Ye.media, "progress playing", Ce), g(Ye.media, "volumechange", Se), g(Ye.media, "play pause ended", be), 
            g(Ye.media, "waiting canplay seeked", _e), C.clickToPlay && "audio" !== Ye.type) {
                var e = X("." + C.classes.videoWrapper);
                if (!e) return;
                e.style.cursor = "pointer", g(e, "click", function() {
                    C.hideControls && Ye.browser.isTouch && !Ye.media.paused || (Ye.media.paused ? ue() : Ye.media.ended ? (fe(), 
                    ue()) : ce());
                });
            }
            C.disableContextMenu && g(Ye.media, "contextmenu", function(e) {
                e.preventDefault();
            }), g(Ye.media, C.events.concat([ "keyup", "keydown" ]).join(" "), function(e) {
                j(Ye.container, e.type, !0);
            });
        }
        function qe() {
            if (s(C.types.html5, Ye.type)) {
                for (var e = Ye.media.querySelectorAll("source"), t = 0; t < e.length; t++) l(e[t]);
                Ye.media.setAttribute("src", C.blankUrl), Ye.media.load(), $e("Cancelled network requests");
            }
        }
        function De(n, r) {
            function a() {
                clearTimeout(Be.cleanUp), O.boolean(r) || (r = !0), O.function(n) && n.call(Xe), 
                r && (Ye.init = !1, Ye.container.parentNode.replaceChild(Xe, Ye.container), Ye.container = null, 
                t.body.style.overflow = "", h(t.body, "click", je), j(Xe, "destroyed", !0));
            }
            if (!Ye.init) return null;
            switch (Ye.type) {
              case "youtube":
                e.clearInterval(Be.buffering), e.clearInterval(Be.playing), Ye.embed.destroy(), 
                a();
                break;

              case "vimeo":
                Ye.embed.unload().then(a), Be.cleanUp = e.setTimeout(a, 200);
                break;

              case "video":
              case "audio":
                Z(!0), a();
            }
        }
        function He() {
            if (!Ye.supported.full) return Je("Basic support only", Ye.type), l(X(C.selectors.controls.wrapper)), 
            l(X(C.selectors.buttons.play)), void Z(!0);
            var e = !B(C.selectors.controls.wrapper).length;
            e && G(), K() && (e && Re(), Ve(), Z(), D(), H(), we(), Se(), Ne(), be(), Ie());
        }
        function Ue() {
            e.setTimeout(function() {
                j(Ye.media, "ready");
            }, 0), m(Ye.media, M.classes.setup, !0), m(Ye.container, C.classes.ready, !0), Ye.media.plyr = We, 
            C.autoplay && ue();
        }
        var We, Ye = this, Be = {};
        Ye.media = v;
        var Xe = v.cloneNode(!0), $e = function() {
            R("log", arguments);
        }, Je = function() {
            R("warn", arguments);
        };
        return $e("Config", C), We = {
            getOriginal: function() {
                return Xe;
            },
            getContainer: function() {
                return Ye.container;
            },
            getEmbed: function() {
                return Ye.embed;
            },
            getMedia: function() {
                return Ye.media;
            },
            getType: function() {
                return Ye.type;
            },
            getDuration: ye,
            getCurrentTime: function() {
                return Ye.media.currentTime;
            },
            getVolume: function() {
                return Ye.media.volume;
            },
            isMuted: function() {
                return Ye.media.muted;
            },
            isReady: function() {
                return f(Ye.container, C.classes.ready);
            },
            isLoading: function() {
                return f(Ye.container, C.classes.loading);
            },
            isPaused: function() {
                return Ye.media.paused;
            },
            on: function(e, t) {
                return g(Ye.container, e, t), this;
            },
            play: ue,
            pause: ce,
            stop: function() {
                ce(), fe();
            },
            restart: fe,
            rewind: pe,
            forward: me,
            seek: fe,
            source: function(e) {
                if (O.undefined(e)) {
                    var t;
                    switch (Ye.type) {
                      case "youtube":
                        t = Ye.embed.getVideoUrl();
                        break;

                      case "vimeo":
                        Ye.embed.getVideoUrl.then(function(e) {
                            t = e;
                        });
                        break;

                      case "soundcloud":
                        Ye.embed.getCurrentSound(function(e) {
                            t = e.permalink_url;
                        });
                        break;

                      default:
                        t = Ye.media.currentSrc;
                    }
                    return t || "";
                }
                Le(e);
            },
            poster: function(e) {
                "video" === Ye.type && Ye.media.setAttribute("poster", e);
            },
            setVolume: we,
            togglePlay: de,
            toggleMute: ke,
            toggleCaptions: Ee,
            toggleFullscreen: he,
            toggleControls: Oe,
            isFullscreen: function() {
                return Ye.isFullscreen || !1;
            },
            support: function(e) {
                return r(Ye, e);
            },
            destroy: De
        }, function() {
            if (Ye.init) return null;
            if (N = _(), Ye.browser = n(), O.htmlElement(Ye.media)) {
                te();
                var e = v.tagName.toLowerCase();
                "div" === e ? (Ye.type = v.getAttribute("data-type"), Ye.embedId = v.getAttribute("data-video-id"), 
                v.removeAttribute("data-type"), v.removeAttribute("data-video-id")) : (Ye.type = e, 
                C.crossorigin = null !== v.getAttribute("crossorigin"), C.autoplay = C.autoplay || null !== v.getAttribute("autoplay"), 
                C.loop = C.loop || null !== v.getAttribute("loop")), Ye.supported = A(Ye.type), 
                Ye.supported.basic && (Ye.container = i(v, t.createElement("div")), Ye.container.setAttribute("tabindex", 0), 
                Q(), $e(Ye.browser.name + " " + Ye.browser.version), re(), (s(C.types.html5, Ye.type) || s(C.types.embed, Ye.type) && !Ye.supported.full) && (He(), 
                Ue(), ee()), Ye.init = !0);
            }
        }(), Ye.init ? We : null;
    }
    function F(e, n) {
        var r = new XMLHttpRequest();
        if (!O.string(n) || !O.htmlElement(t.querySelector("#" + n))) {
            var a = t.createElement("div");
            a.setAttribute("hidden", ""), O.string(n) && a.setAttribute("id", n), t.body.insertBefore(a, t.body.childNodes[0]), 
            "withCredentials" in r && (r.open("GET", e, !0), r.onload = function() {
                a.innerHTML = r.responseText;
            }, r.send());
        }
    }
    function A(e) {
        var r = n(), a = r.isIE && r.version <= 9, s = r.isIos, o = r.isIphone, i = !!t.createElement("audio").canPlayType, l = !!t.createElement("video").canPlayType, u = !1, c = !1;
        switch (e) {
          case "video":
            c = (u = l) && !a && !o;
            break;

          case "audio":
            c = (u = i) && !a;
            break;

          case "vimeo":
            u = !0, c = !a && !s;
            break;

          case "youtube":
            u = !0, c = !a && !s, s && !o && r.version >= 10 && (c = !0);
            break;

          case "soundcloud":
            u = !0, c = !a && !o;
            break;

          default:
            c = (u = i && l) && !a;
        }
        return {
            basic: u,
            full: c
        };
    }
    function I(e) {
        if (O.string(e) ? e = t.querySelector(e) : O.undefined(e) && (e = t.body), O.htmlElement(e)) {
            var n = e.querySelectorAll("." + M.classes.setup), r = [];
            return Array.prototype.slice.call(n).forEach(function(e) {
                O.object(e.plyr) && r.push(e.plyr);
            }), r;
        }
        return [];
    }
    var N, P = {
        x: 0,
        y: 0
    }, M = {
        enabled: !0,
        debug: !1,
        autoplay: !1,
        loop: !1,
        seekTime: 10,
        volume: 10,
        volumeMin: 0,
        volumeMax: 10,
        volumeStep: 1,
        duration: null,
        displayDuration: !0,
        loadSprite: !0,
        iconPrefix: "plyr",
        iconUrl: "https://cdn.plyr.io/2.0.17/plyr.svg",
        blankUrl: "https://cdn.plyr.io/static/blank.mp4",
        clickToPlay: !0,
        hideControls: !0,
        showPosterOnEnd: !1,
        disableContextMenu: !0,
        keyboardShorcuts: {
            focused: !0,
            global: !1
        },
        tooltips: {
            controls: !1,
            seek: !0
        },
        selectors: {
            html5: "video, audio",
            embed: "[data-type]",
            editable: "input, textarea, select, [contenteditable]",
            container: ".plyr",
            controls: {
                container: null,
                wrapper: ".plyr__controls"
            },
            labels: "[data-plyr]",
            buttons: {
                seek: '[data-plyr="seek"]',
                play: '[data-plyr="play"]',
                pause: '[data-plyr="pause"]',
                restart: '[data-plyr="restart"]',
                rewind: '[data-plyr="rewind"]',
                forward: '[data-plyr="fast-forward"]',
                mute: '[data-plyr="mute"]',
                captions: '[data-plyr="captions"]',
                fullscreen: '[data-plyr="fullscreen"]'
            },
            volume: {
                input: '[data-plyr="volume"]',
                display: ".plyr__volume--display"
            },
            progress: {
                container: ".plyr__progress",
                buffer: ".plyr__progress--buffer",
                played: ".plyr__progress--played"
            },
            captions: ".plyr__captions",
            currentTime: ".plyr__time--current",
            duration: ".plyr__time--duration"
        },
        classes: {
            setup: "plyr--setup",
            ready: "plyr--ready",
            videoWrapper: "plyr__video-wrapper",
            embedWrapper: "plyr__video-embed",
            type: "plyr--{0}",
            stopped: "plyr--stopped",
            playing: "plyr--playing",
            muted: "plyr--muted",
            loading: "plyr--loading",
            hover: "plyr--hover",
            tooltip: "plyr__tooltip",
            hidden: "plyr__sr-only",
            hideControls: "plyr--hide-controls",
            isIos: "plyr--is-ios",
            isTouch: "plyr--is-touch",
            captions: {
                enabled: "plyr--captions-enabled",
                active: "plyr--captions-active"
            },
            fullscreen: {
                enabled: "plyr--fullscreen-enabled",
                fallback: "plyr--fullscreen-fallback",
                active: "plyr--fullscreen-active"
            },
            tabFocus: "tab-focus"
        },
        captions: {
            defaultActive: !1
        },
        fullscreen: {
            enabled: !0,
            fallback: !0,
            allowAudio: !1
        },
        storage: {
            enabled: !0,
            key: "plyr"
        },
        controls: [ "play-large", "play", "progress", "current-time", "mute", "volume", "captions", "fullscreen" ],
        i18n: {
            restart: "Restart",
            rewind: "Rewind {seektime} secs",
            play: "Play",
            pause: "Pause",
            forward: "Forward {seektime} secs",
            played: "played",
            buffered: "buffered",
            currentTime: "Current time",
            duration: "Duration",
            volume: "Volume",
            toggleMute: "Toggle Mute",
            toggleCaptions: "Toggle Captions",
            toggleFullscreen: "Toggle Fullscreen",
            frameTitle: "Player for {title}"
        },
        types: {
            embed: [ "youtube", "vimeo", "soundcloud" ],
            html5: [ "video", "audio" ]
        },
        urls: {
            vimeo: {
                api: "https://player.vimeo.com/api/player.js"
            },
            youtube: {
                api: "https://www.youtube.com/iframe_api"
            },
            soundcloud: {
                api: "https://w.soundcloud.com/player/api.js"
            }
        },
        listeners: {
            seek: null,
            play: null,
            pause: null,
            restart: null,
            rewind: null,
            forward: null,
            mute: null,
            volume: null,
            captions: null,
            fullscreen: null
        },
        events: [ "ready", "ended", "progress", "stalled", "playing", "waiting", "canplay", "canplaythrough", "loadstart", "loadeddata", "loadedmetadata", "timeupdate", "volumechange", "play", "pause", "error", "seeking", "seeked", "emptied" ],
        logPrefix: "[Plyr]"
    }, O = {
        object: function(e) {
            return null !== e && "object" == typeof e;
        },
        array: function(e) {
            return null !== e && "object" == typeof e && e.constructor === Array;
        },
        number: function(e) {
            return null !== e && ("number" == typeof e && !isNaN(e - 0) || "object" == typeof e && e.constructor === Number);
        },
        string: function(e) {
            return null !== e && ("string" == typeof e || "object" == typeof e && e.constructor === String);
        },
        boolean: function(e) {
            return null !== e && "boolean" == typeof e;
        },
        nodeList: function(e) {
            return null !== e && e instanceof NodeList;
        },
        htmlElement: function(e) {
            return null !== e && e instanceof HTMLElement;
        },
        function: function(e) {
            return null !== e && "function" == typeof e;
        },
        undefined: function(e) {
            return null !== e && void 0 === e;
        }
    }, L = {
        supported: function() {
            try {
                e.localStorage.setItem("___test", "OK");
                var t = e.localStorage.getItem("___test");
                return e.localStorage.removeItem("___test"), "OK" === t;
            } catch (e) {
                return !1;
            }
            return !1;
        }()
    };
    return {
        setup: function(e, n) {
            function r(e, t) {
                f(t, M.classes.hook) || a.push({
                    target: e,
                    media: t
                });
            }
            var a = [], s = [], o = [ M.selectors.html5, M.selectors.embed ].join(",");
            if (O.string(e) ? e = t.querySelectorAll(e) : O.htmlElement(e) ? e = [ e ] : O.nodeList(e) || O.array(e) || O.string(e) || (O.undefined(n) && O.object(e) && (n = e), 
            e = t.querySelectorAll(o)), O.nodeList(e) && (e = Array.prototype.slice.call(e)), 
            !A().basic || !e.length) return !1;
            for (var i = 0; i < e.length; i++) {
                var l = e[i], u = l.querySelectorAll(o);
                if (u.length) for (var c = 0; c < u.length; c++) r(l, u[c]); else y(l, o) && r(l, l);
            }
            return a.forEach(function(e) {
                var t = e.target, r = e.media, a = {};
                try {
                    a = JSON.parse(t.getAttribute("data-plyr"));
                } catch (e) {}
                var o = T({}, M, n, a);
                if (!o.enabled) return null;
                var i = new C(r, o);
                if (O.object(i)) {
                    if (o.debug) {
                        var l = o.events.concat([ "setup", "statechange", "enterfullscreen", "exitfullscreen", "captionsenabled", "captionsdisabled" ]);
                        g(i.getContainer(), l.join(" "), function(e) {
                            console.log([ o.logPrefix, "event:", e.type ].join(" "), e.detail.plyr);
                        });
                    }
                    k(i.getContainer(), "setup", !0, {
                        plyr: i
                    }), s.push(i);
                }
            }), s;
        },
        supported: A,
        loadSprite: F,
        get: I
    };
}), function() {
    function e(e, t) {
        t = t || {
            bubbles: !1,
            cancelable: !1,
            detail: void 0
        };
        var n = document.createEvent("CustomEvent");
        return n.initCustomEvent(e, t.bubbles, t.cancelable, t.detail), n;
    }
    "function" != typeof window.CustomEvent && (e.prototype = window.Event.prototype, 
    window.CustomEvent = e);
}();

var tns = function() {
    if (!Object.keys) {
        Object.keys = function(object) {
            var keys = [];
            for (var name in object) {
                if (Object.prototype.hasOwnProperty.call(object, name)) {
                    keys.push(name);
                }
            }
            return keys;
        };
    }
    (function() {
        "use strict";
        if (!("remove" in Element.prototype)) {
            Element.prototype.remove = function() {
                if (this.parentNode) {
                    this.parentNode.removeChild(this);
                }
            };
        }
    })();
    function extend() {
        var obj, name, copy, target = arguments[0] || {}, i = 1, length = arguments.length;
        for (;i < length; i++) {
            if ((obj = arguments[i]) !== null) {
                for (name in obj) {
                    copy = obj[name];
                    if (target === copy) {
                        continue;
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    }
    function checkStorageValue(value) {
        return [ "true", "false" ].indexOf(value) >= 0 ? JSON.parse(value) : value;
    }
    function setLocalStorage(key, value, access) {
        if (access) {
            localStorage.setItem(key, value);
        }
        return value;
    }
    function getSlideId() {
        var id = window.tnsId;
        window.tnsId = !id ? 1 : id + 1;
        return "tns" + window.tnsId;
    }
    function getBody() {
        var doc = document, body = doc.body;
        if (!body) {
            body = doc.createElement("body");
            body.fake = true;
        }
        return body;
    }
    var docElement = document.documentElement;
    function setFakeBody(body) {
        var docOverflow = "";
        if (body.fake) {
            docOverflow = docElement.style.overflow;
            body.style.background = "";
            body.style.overflow = docElement.style.overflow = "hidden";
            docElement.appendChild(body);
        }
        return docOverflow;
    }
    function resetFakeBody(body, docOverflow) {
        if (body.fake) {
            body.remove();
            docElement.style.overflow = docOverflow;
            docElement.offsetHeight;
        }
    }
    function calc() {
        var doc = document, body = getBody(), docOverflow = setFakeBody(body), div = doc.createElement("div"), result = false;
        body.appendChild(div);
        try {
            var vals = [ "calc(10px)", "-moz-calc(10px)", "-webkit-calc(10px)" ], val;
            for (var i = 0; i < 3; i++) {
                val = vals[i];
                div.style.width = val;
                if (div.offsetWidth === 10) {
                    result = val.replace("(10px)", "");
                    break;
                }
            }
        } catch (e) {}
        body.fake ? resetFakeBody(body, docOverflow) : div.remove();
        return result;
    }
    function subpixelLayout() {
        var doc = document, body = getBody(), docOverflow = setFakeBody(body), parent = doc.createElement("div"), child1 = doc.createElement("div"), child2, supported;
        parent.style.cssText = "width: 10px";
        child1.style.cssText = "float: left; width: 5.5px; height: 10px;";
        child2 = child1.cloneNode(true);
        parent.appendChild(child1);
        parent.appendChild(child2);
        body.appendChild(parent);
        supported = child1.offsetTop !== child2.offsetTop;
        body.fake ? resetFakeBody(body, docOverflow) : parent.remove();
        return supported;
    }
    function mediaquerySupport() {
        var doc = document, body = getBody(), docOverflow = setFakeBody(body), div = doc.createElement("div"), style = doc.createElement("style"), rule = "@media all and (min-width:1px){.tns-mq-test{position:absolute}}", position;
        style.type = "text/css";
        div.className = "tns-mq-test";
        body.appendChild(style);
        body.appendChild(div);
        if (style.styleSheet) {
            style.styleSheet.cssText = rule;
        } else {
            style.appendChild(doc.createTextNode(rule));
        }
        position = window.getComputedStyle ? window.getComputedStyle(div).position : div.currentStyle["position"];
        body.fake ? resetFakeBody(body, docOverflow) : div.remove();
        return position === "absolute";
    }
    function createStyleSheet(media) {
        var style = document.createElement("style");
        if (media) {
            style.setAttribute("media", media);
        }
        document.querySelector("head").appendChild(style);
        return style.sheet ? style.sheet : style.styleSheet;
    }
    function addCSSRule(sheet, selector, rules, index) {
        "insertRule" in sheet ? sheet.insertRule(selector + "{" + rules + "}", index) : sheet.addRule(selector, rules, index);
    }
    function getCssRulesLength(sheet) {
        var rule = "insertRule" in sheet ? sheet.cssRules : sheet.rules;
        return rule.length;
    }
    function toDegree(y, x) {
        return Math.atan2(y, x) * (180 / Math.PI);
    }
    function getTouchDirection(angle, range) {
        var direction = false, gap = Math.abs(90 - Math.abs(angle));
        if (gap >= 90 - range) {
            direction = "horizontal";
        } else if (gap <= range) {
            direction = "vertical";
        }
        return direction;
    }
    function hasClass(el, str) {
        return el.className.indexOf(str) >= 0;
    }
    function addClass(el, str) {
        if (!hasClass(el, str)) {
            el.className += " " + str;
        }
    }
    function removeClass(el, str) {
        if (hasClass(el, str)) {
            el.className = el.className.replace(str, "");
        }
    }
    function hasAttr(el, attr) {
        return el.hasAttribute(attr);
    }
    function getAttr(el, attr) {
        return el.getAttribute(attr);
    }
    function isNodeList(el) {
        return typeof el.item !== "undefined";
    }
    function setAttrs(els, attrs) {
        els = isNodeList(els) || els instanceof Array ? els : [ els ];
        if (Object.prototype.toString.call(attrs) !== "[object Object]") {
            return;
        }
        for (var i = els.length; i--; ) {
            for (var key in attrs) {
                els[i].setAttribute(key, attrs[key]);
            }
        }
    }
    function removeAttrs(els, attrs) {
        els = isNodeList(els) || els instanceof Array ? els : [ els ];
        attrs = attrs instanceof Array ? attrs : [ attrs ];
        var attrLength = attrs.length;
        for (var i = els.length; i--; ) {
            for (var j = attrLength; j--; ) {
                els[i].removeAttribute(attrs[j]);
            }
        }
    }
    function hideElement(el) {
        if (!hasAttr(el, "hidden")) {
            setAttrs(el, {
                hidden: ""
            });
        }
    }
    function showElement(el) {
        if (hasAttr(el, "hidden")) {
            removeAttrs(el, "hidden");
        }
    }
    function imageLoaded(img) {
        if (typeof img.complete === "boolean") {
            return img.complete;
        } else if (typeof img.naturalWidth === "number") {
            return img.naturalWidth !== 0;
        }
    }
    function whichProperty(props) {
        var el = document.createElement("fakeelement"), len = props.length;
        for (var i = 0; i < props.length; i++) {
            var prop = props[i];
            if (el.style[prop] !== undefined) {
                return prop;
            }
        }
        return false;
    }
    function getEndProperty(propIn, propOut) {
        var endProp = false;
        if (/^Webkit/.test(propIn)) {
            endProp = "webkit" + propOut + "End";
        } else if (/^O/.test(propIn)) {
            endProp = "o" + propOut + "End";
        } else if (propIn) {
            endProp = propOut.toLowerCase() + "end";
        }
        return endProp;
    }
    var supportsPassive = false;
    try {
        var opts = Object.defineProperty({}, "passive", {
            get: function() {
                supportsPassive = true;
            }
        });
        window.addEventListener("test", null, opts);
    } catch (e) {}
    var passiveOption = supportsPassive ? {
        passive: true
    } : false;
    function addEvents(el, obj) {
        for (var prop in obj) {
            var option = prop === "touchstart" || prop === "touchmove" ? passiveOption : false;
            el.addEventListener(prop, obj[prop], option);
        }
    }
    function removeEvents(el, obj) {
        for (var prop in obj) {
            var option = [ "touchstart", "touchmove" ].indexOf(prop) >= 0 ? passiveOption : false;
            el.removeEventListener(prop, obj[prop], option);
        }
    }
    function Events() {
        return {
            topics: {},
            on: function(eventName, fn) {
                this.topics[eventName] = this.topics[eventName] || [];
                this.topics[eventName].push(fn);
            },
            off: function(eventName, fn) {
                if (this.topics[eventName]) {
                    for (var i = 0; i < this.topics[eventName].length; i++) {
                        if (this.topics[eventName][i] === fn) {
                            this.topics[eventName].splice(i, 1);
                            break;
                        }
                    }
                }
            },
            emit: function(eventName, data) {
                if (this.topics[eventName]) {
                    this.topics[eventName].forEach(function(fn) {
                        fn(data);
                    });
                }
            }
        };
    }
    function jsTransform(element, attr, prefix, postfix, to, duration, callback) {
        var tick = Math.min(duration, 10), unit = to.indexOf("%") >= 0 ? "%" : "px", to = to.replace(unit, ""), from = Number(element.style[attr].replace(prefix, "").replace(postfix, "").replace(unit, "")), positionTick = (to - from) / duration * tick, running;
        setTimeout(moveElement, tick);
        function moveElement() {
            duration -= tick;
            from += positionTick;
            element.style[attr] = prefix + from + unit + postfix;
            if (duration > 0) {
                setTimeout(moveElement, tick);
            } else {
                callback();
            }
        }
    }
    var browserInfo = navigator.userAgent;
    var localStorageAccess = true;
    var tnsStorage = {};
    try {
        tnsStorage = localStorage;
        if (!tnsStorage["tnsApp"]) {
            tnsStorage["tnsApp"] = browserInfo;
        } else if (tnsStorage["tnsApp"] !== browserInfo) {
            tnsStorage["tnsApp"] = browserInfo;
            [ "tC", "tSP", "tMQ", "tTf", "tTDu", "tTDe", "tADu", "tADe", "tTE", "tAE" ].forEach(function(item) {
                tnsStorage.removeItem(item);
            });
        }
    } catch (e) {
        localStorageAccess = false;
    }
    var doc = document;
    var win = window;
    var KEYS = {
        ENTER: 13,
        SPACE: 32,
        PAGEUP: 33,
        PAGEDOWN: 34,
        END: 35,
        HOME: 36,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40
    };
    var CALC = checkStorageValue(tnsStorage["tC"]) || setLocalStorage("tC", calc(), localStorageAccess);
    var SUBPIXEL = checkStorageValue(tnsStorage["tSP"]) || setLocalStorage("tSP", subpixelLayout(), localStorageAccess);
    var CSSMQ = checkStorageValue(tnsStorage["tMQ"]) || setLocalStorage("tMQ", mediaquerySupport(), localStorageAccess);
    var TRANSFORM = checkStorageValue(tnsStorage["tTf"]) || setLocalStorage("tTf", whichProperty([ "transform", "WebkitTransform", "MozTransform", "msTransform", "OTransform" ]), localStorageAccess);
    var TRANSITIONDURATION = checkStorageValue(tnsStorage["tTDu"]) || setLocalStorage("tTDu", whichProperty([ "transitionDuration", "WebkitTransitionDuration", "MozTransitionDuration", "OTransitionDuration" ]), localStorageAccess);
    var TRANSITIONDELAY = checkStorageValue(tnsStorage["tTDe"]) || setLocalStorage("tTDe", whichProperty([ "transitionDelay", "WebkitTransitionDelay", "MozTransitionDelay", "OTransitionDelay" ]), localStorageAccess);
    var ANIMATIONDURATION = checkStorageValue(tnsStorage["tADu"]) || setLocalStorage("tADu", whichProperty([ "animationDuration", "WebkitAnimationDuration", "MozAnimationDuration", "OAnimationDuration" ]), localStorageAccess);
    var ANIMATIONDELAY = checkStorageValue(tnsStorage["tADe"]) || setLocalStorage("tADe", whichProperty([ "animationDelay", "WebkitAnimationDelay", "MozAnimationDelay", "OAnimationDelay" ]), localStorageAccess);
    var TRANSITIONEND = checkStorageValue(tnsStorage["tTE"]) || setLocalStorage("tTE", getEndProperty(TRANSITIONDURATION, "Transition"), localStorageAccess);
    var ANIMATIONEND = checkStorageValue(tnsStorage["tAE"]) || setLocalStorage("tAE", getEndProperty(ANIMATIONDURATION, "Animation"), localStorageAccess);
    if (!CSSMQ) {
        SUBPIXEL = false;
    }
    var tns = function(options) {
        options = extend({
            container: doc.querySelector(".slider"),
            mode: "carousel",
            axis: "horizontal",
            items: 1,
            gutter: 0,
            edgePadding: 0,
            fixedWidth: false,
            slideBy: 1,
            controls: true,
            controlsText: [ "prev", "next" ],
            controlsContainer: false,
            nav: true,
            navContainer: false,
            arrowKeys: false,
            speed: 300,
            autoplay: false,
            autoplayTimeout: 5e3,
            autoplayDirection: "forward",
            autoplayText: [ "start", "stop" ],
            autoplayHoverPause: false,
            autoplayButton: false,
            autoplayButtonOutput: true,
            autoplayResetOnVisibility: true,
            loop: true,
            rewind: false,
            autoHeight: false,
            responsive: false,
            lazyload: false,
            touch: true,
            mouseDrag: false,
            nested: false,
            freezable: true,
            onInit: false
        }, options || {});
        [ "container", "controlsContainer", "navContainer", "autoplayButton" ].forEach(function(item) {
            if (typeof options[item] === "string") {
                options[item] = doc.querySelector(options[item]);
            }
        });
        if (!options.container || !options.container.nodeName || options.container.children.length < 2) {
            return;
        }
        if (options.responsive) {
            var resTem = {}, res = options.responsive;
            for (var key in res) {
                var val = res[key];
                resTem[key] = typeof val === "number" ? {
                    items: val
                } : val;
            }
            options.responsive = resTem;
            resTem = null;
            if (0 in options.responsive) {
                options = extend(options, options.responsive[0]);
                delete options.responsive[0];
            }
        }
        var carousel = options.mode === "carousel" ? true : false;
        if (!carousel) {
            options.axis = "horizontal";
            options.rewind = false;
            options.loop = true;
            options.edgePadding = false;
            var animateIn = "tns-fadeIn", animateOut = "tns-fadeOut", animateDelay = false, animateNormal = options.animateNormal || "tns-normal";
            if (TRANSITIONEND && ANIMATIONEND) {
                animateIn = options.animateIn || animateIn;
                animateOut = options.animateOut || animateOut;
                animateDelay = options.animateDelay || animateDelay;
            }
        }
        var horizontal = options.axis === "horizontal" ? true : false, outerWrapper = doc.createElement("div"), innerWrapper = doc.createElement("div"), container = options.container, containerParent = container.parentNode, slideItems = container.children, slideCount = slideItems.length, vpOuter = containerParent.clientWidth, vpInner, responsive = options.responsive, responsiveItems = [], breakpoints = false, breakpointZone = 0, windowWidth = getWindowWidth();
        if (responsive) {
            breakpoints = Object.keys(responsive).map(function(x) {
                return parseInt(x);
            }).sort(function(a, b) {
                return a - b;
            });
            breakpoints.forEach(function(bp) {
                responsiveItems = responsiveItems.concat(Object.keys(responsive[bp]));
            });
            var arr = [];
            responsiveItems.forEach(function(item) {
                if (arr.indexOf(item) < 0) {
                    arr.push(item);
                }
            });
            responsiveItems = arr;
            setBreakpointZone();
        }
        var items = getOption("items"), slideBy = getOption("slideBy") === "page" ? items : getOption("slideBy"), nested = options.nested, gutter = getOption("gutter"), edgePadding = getOption("edgePadding"), fixedWidth = getOption("fixedWidth"), arrowKeys = getOption("arrowKeys"), speed = getOption("speed"), rewind = options.rewind, loop = rewind ? false : options.loop, autoHeight = getOption("autoHeight"), sheet = createStyleSheet(), lazyload = options.lazyload, slideOffsetTops, slideItemsOut = [], cloneCount = loop ? slideCount * 2 : 0, slideCountNew = !carousel ? slideCount + cloneCount : slideCount + cloneCount * 2, hasRightDeadZone = fixedWidth && !loop && !edgePadding ? true : false, updateIndexBeforeTransform = !carousel || !loop ? true : false, transformAttr = horizontal ? "left" : "top", transformPrefix = "", transformPostfix = "", index = !carousel ? 0 : cloneCount, indexCached = index, indexMin = 0, indexMax = slideCountNew - items, resizeTimer, touchedOrDraged, running = false, onInit = options.onInit, events = new Events(), containerIdCached = container.id, classContainer = " tns-slider tns-" + options.mode, slideId = container.id || getSlideId(), disable = getOption("disable"), freezable = options.freezable, freeze = disable ? true : freezable ? slideCount <= items : false, importantStr = nested === "inner" ? " !important" : "", controlsEvents = {
            click: onControlsClick,
            keydown: onControlsKeydown
        }, navEvents = {
            click: onNavClick,
            keydown: onNavKeydown
        }, hoverEvents = {
            mouseover: mouseoverPause,
            mouseout: mouseoutRestart
        }, visibilityEvent = {
            visibilitychange: onVisibilityChange
        }, docmentKeydownEvent = {
            keydown: onDocumentKeydown
        }, touchEvents = {
            touchstart: onTouchOrMouseStart,
            touchmove: onTouchOrMouseMove,
            touchend: onTouchOrMouseEnd,
            touchcancel: onTouchOrMouseEnd
        }, dragEvents = {
            mousedown: onTouchOrMouseStart,
            mousemove: onTouchOrMouseMove,
            mouseup: onTouchOrMouseEnd,
            mouseleave: onTouchOrMouseEnd
        }, hasControls = checkOption("controls"), hasNav = checkOption("nav"), hasAutoplay = checkOption("autoplay"), hasTouch = checkOption("touch"), hasMouseDrag = checkOption("mouseDrag"), slideActiveClass = "tns-slide-active";
        if (hasControls) {
            var controls = getOption("controls"), controlsText = getOption("controlsText"), controlsContainer = options.controlsContainer, prevButton, nextButton, prevIsButton, nextIsButton;
        }
        if (hasNav) {
            var nav = getOption("nav"), navContainer = options.navContainer, navItems, visibleNavIndexes = [], visibleNavIndexesCached = visibleNavIndexes, navClicked = -1, navCurrentIndex = 0, navCurrentIndexCached = 0, navActiveClass = "tns-nav-active";
        }
        if (hasAutoplay) {
            var autoplay = getOption("autoplay"), autoplayTimeout = getOption("autoplayTimeout"), autoplayDirection = options.autoplayDirection === "forward" ? 1 : -1, autoplayText = getOption("autoplayText"), autoplayHoverPause = getOption("autoplayHoverPause"), autoplayTimer, autoplayButton = options.autoplayButton, animating = false, autoplayHoverStopped = false, autoplayHtmlStrings = [ "<span class='tns-visually-hidden'>", " animation</span>" ], autoplayResetOnVisibility = getOption("autoplayResetOnVisibility"), autoplayResetVisibilityState = false;
        }
        if (hasTouch) {
            var touch = getOption("touch"), startX = null, startY = null, translateInit, moveDirectionExpected = 0, disX, disY;
        }
        if (hasMouseDrag) {
            var mouseDrag = getOption("mouseDrag"), isDragEvent = false;
        }
        if (freeze) {
            controls = nav = touch = mouseDrag = arrowKeys = autoplay = autoplayHoverPause = autoplayResetOnVisibility = false;
        }
        if (TRANSFORM) {
            transformAttr = TRANSFORM;
            transformPrefix = "translate";
            transformPrefix += horizontal ? "X(" : "Y(";
            transformPostfix = ")";
        }
        function getWindowWidth() {
            return win.innerWidth || doc.documentElement.clientWidth || doc.body.clientWidth;
        }
        function checkOption(item) {
            var result = options[item];
            if (!result && breakpoints && responsiveItems.indexOf(item) >= 0) {
                breakpoints.forEach(function(bp) {
                    if (responsive[bp][item]) {
                        result = true;
                    }
                });
            }
            return result;
        }
        function getOption(item, viewport) {
            viewport = viewport ? viewport : windowWidth;
            var obj = {
                slideBy: "page",
                edgePadding: false,
                autoHeight: true
            }, result;
            if (!carousel && item in obj) {
                result = obj[item];
            } else {
                if (item === "items" && getOption("fixedWidth")) {
                    result = Math.floor(vpOuter / (getOption("fixedWidth") + getOption("gutter")));
                } else if (item === "autoHeight" && nested === "outer") {
                    result = true;
                } else {
                    result = options[item];
                    if (breakpoints && responsiveItems.indexOf(item) >= 0) {
                        for (var i = 0, len = breakpoints.length; i < len; i++) {
                            var bp = breakpoints[i];
                            if (viewport >= bp) {
                                if (item in responsive[bp]) {
                                    result = responsive[bp][item];
                                }
                            } else {
                                break;
                            }
                        }
                    }
                }
            }
            if (item === "slideBy" && result === "page") {
                result = getOption("items");
            }
            return result;
        }
        function getSlideMarginLeft(i) {
            var str = CALC ? CALC + "(" + i * 100 + "% / " + slideCountNew + ")" : i * 100 / slideCountNew + "%";
            return str;
        }
        function getInnerWrapperStyles(edgePaddingTem, gutterTem, fixedWidthTem) {
            var str = "";
            if (edgePaddingTem) {
                var gap = edgePaddingTem;
                if (gutterTem) {
                    gap += gutterTem;
                }
                if (fixedWidthTem) {
                    str = "margin: 0px " + (vpOuter % (fixedWidthTem + gutterTem) + gutterTem) / 2 + "px";
                } else {
                    str = horizontal ? "margin: 0 " + edgePaddingTem + "px 0 " + gap + "px;" : "padding: " + gap + "px 0 " + edgePaddingTem + "px 0;";
                }
            } else if (gutterTem && !fixedWidthTem) {
                var gutterTemUnit = "-" + gutterTem + "px", dir = horizontal ? gutterTemUnit + " 0 0" : "0 " + gutterTemUnit + " 0";
                str = "margin: 0 " + dir + ";";
            }
            return str;
        }
        function getContainerWidth(fixedWidthTem, gutterTem, itemsTem) {
            var str;
            if (fixedWidthTem) {
                str = (fixedWidthTem + gutterTem) * slideCountNew + "px";
            } else {
                str = CALC ? CALC + "(" + slideCountNew * 100 + "% / " + itemsTem + ")" : slideCountNew * 100 / itemsTem + "%";
            }
            return str;
        }
        function getSlideWidthStyle(fixedWidthTem, gutterTem, itemsTem) {
            var str = "";
            if (horizontal) {
                str = "width:";
                if (fixedWidthTem) {
                    str += fixedWidthTem + gutterTem + "px";
                } else {
                    var dividend = carousel ? slideCountNew : itemsTem;
                    str += CALC ? CALC + "(100% / " + dividend + ")" : 100 / dividend + "%";
                }
                str += importantStr + ";";
            }
            return str;
        }
        function getSlideGutterStyle(gutterTem) {
            var str = "";
            if (gutterTem !== false) {
                var prop = horizontal ? "padding-" : "margin-", dir = horizontal ? "right" : "bottom";
                str = prop + dir + ": " + gutterTem + "px;";
            }
            return str;
        }
        (function sliderInit() {
            outerWrapper.appendChild(innerWrapper);
            containerParent.insertBefore(outerWrapper, container);
            innerWrapper.appendChild(container);
            vpInner = innerWrapper.clientWidth;
            var classOuter = "tns-outer", classInner = "tns-inner", hasGutter = checkOption("gutter");
            if (carousel) {
                if (horizontal) {
                    if (checkOption("edgePadding") || hasGutter && !options.fixedWidth) {
                        classOuter += " tns-ovh";
                    } else {
                        classInner += " tns-ovh";
                    }
                } else {
                    classInner += " tns-ovh";
                }
            } else if (hasGutter) {
                classOuter += " tns-ovh";
            }
            outerWrapper.className = classOuter;
            innerWrapper.className = classInner;
            innerWrapper.id = slideId + "-iw";
            if (autoHeight) {
                innerWrapper.className += " tns-ah";
                innerWrapper.style[TRANSITIONDURATION] = speed / 1e3 + "s";
            }
            if (container.id === "") {
                container.id = slideId;
            }
            classContainer += SUBPIXEL ? " tns-subpixel" : " tns-no-subpixel";
            classContainer += CALC ? " tns-calc" : " tns-no-calc";
            if (carousel) {
                classContainer += " tns-" + options.axis;
            }
            container.className += classContainer;
            if (carousel && TRANSITIONEND) {
                var eve = {};
                eve[TRANSITIONEND] = onTransitionEnd;
                addEvents(container, eve);
            }
            classOuter = classInner = null;
            for (var x = 0; x < slideCount; x++) {
                var item = slideItems[x];
                if (!item.id) {
                    item.id = slideId + "-item" + x;
                }
                addClass(item, "tns-item");
                if (!carousel && animateNormal) {
                    addClass(item, animateNormal);
                }
                setAttrs(item, {
                    "aria-hidden": "true",
                    tabindex: "-1"
                });
            }
            if (loop || edgePadding) {
                var fragmentBefore = doc.createDocumentFragment(), fragmentAfter = doc.createDocumentFragment();
                for (var j = cloneCount; j--; ) {
                    var num = j % slideCount, cloneFirst = slideItems[num].cloneNode(true);
                    removeAttrs(cloneFirst, "id");
                    fragmentAfter.insertBefore(cloneFirst, fragmentAfter.firstChild);
                    if (carousel) {
                        var cloneLast = slideItems[slideCount - 1 - num].cloneNode(true);
                        removeAttrs(cloneLast, "id");
                        fragmentBefore.appendChild(cloneLast);
                    }
                }
                container.insertBefore(fragmentBefore, container.firstChild);
                container.appendChild(fragmentAfter);
                slideItems = container.children;
            }
            for (var i = index; i < index + Math.min(slideCount, items); i++) {
                var item = slideItems[i];
                setAttrs(item, {
                    "aria-hidden": "false"
                });
                removeAttrs(item, [ "tabindex" ]);
                addClass(item, slideActiveClass);
                if (!carousel) {
                    item.style.left = (i - index) * 100 / items + "%";
                    addClass(item, animateIn);
                    removeClass(item, animateNormal);
                }
            }
            if (carousel && horizontal) {
                if (SUBPIXEL) {
                    var cssFontSize = win.getComputedStyle(slideItems[0]).fontSize;
                    if (cssFontSize.indexOf("em") > 0) {
                        cssFontSize = parseFloat(cssFontSize) * 16 + "px";
                    }
                    addCSSRule(sheet, "#" + slideId, "font-size:0;", getCssRulesLength(sheet));
                    addCSSRule(sheet, "#" + slideId + " > .tns-item", "font-size:" + cssFontSize + ";", getCssRulesLength(sheet));
                } else {
                    [].forEach.call(slideItems, function(slide, i) {
                        slide.style.marginLeft = getSlideMarginLeft(i);
                    });
                }
            }
            if (CSSMQ) {
                var str = getInnerWrapperStyles(options.edgePadding, options.gutter, options.fixedWidth);
                addCSSRule(sheet, "#" + slideId + "-iw", str, getCssRulesLength(sheet));
                if (carousel && horizontal) {
                    str = "width:" + getContainerWidth(options.fixedWidth, options.gutter, options.items);
                    addCSSRule(sheet, "#" + slideId, str, getCssRulesLength(sheet));
                }
                if (horizontal || options.gutter) {
                    str = getSlideWidthStyle(options.fixedWidth, options.gutter, options.items) + getSlideGutterStyle(options.gutter);
                    addCSSRule(sheet, "#" + slideId + " > .tns-item", str, getCssRulesLength(sheet));
                }
            } else {
                innerWrapper.style.cssText = getInnerWrapperStyles(edgePadding, gutter, fixedWidth);
                if (carousel && horizontal) {
                    container.style.width = getContainerWidth(fixedWidth, gutter, items);
                }
                if (horizontal || gutter) {
                    var str = getSlideWidthStyle(fixedWidth, gutter, items) + getSlideGutterStyle(gutter);
                    addCSSRule(sheet, "#" + slideId + " > .tns-item", str, getCssRulesLength(sheet));
                }
            }
            if (!horizontal && !disable) {
                getSlideOffsetTops();
                updateContentWrapperHeight();
            }
            if (responsive && CSSMQ) {
                breakpoints.forEach(function(bp) {
                    var opts = responsive[bp], str = "", innerWrapperStr = "", containerStr = "", slideStr = "", itemsBP = getOption("items", bp), fixedWidthBP = getOption("fixedWidth", bp), edgePaddingBP = getOption("edgePadding", bp), gutterBP = getOption("gutter", bp);
                    if ("edgePadding" in opts || "gutter" in opts) {
                        innerWrapperStr = "#" + slideId + "-iw{" + getInnerWrapperStyles(edgePaddingBP, gutterBP, fixedWidthBP) + "}";
                    }
                    if (carousel && horizontal && ("fixedWidth" in opts || "gutter" in opts || "items" in opts)) {
                        containerStr = "#" + slideId + "{" + "width:" + getContainerWidth(fixedWidthBP, gutterBP, itemsBP) + "}";
                    }
                    if ("fixedWidth" in opts || checkOption("fixedWidth") && "gutter" in opts || !carousel && "items" in opts) {
                        slideStr += getSlideWidthStyle(fixedWidthBP, gutterBP, itemsBP);
                    }
                    if ("gutter" in opts) {
                        slideStr += getSlideGutterStyle(gutterBP);
                    }
                    if (slideStr.length > 0) {
                        slideStr = "#" + slideId + " > .tns-item{" + slideStr + "}";
                    }
                    str = innerWrapperStr + containerStr + slideStr;
                    if (str.length > 0) {
                        sheet.insertRule("@media (min-width: " + bp / 16 + "em) {" + str + "}", sheet.cssRules.length);
                    }
                });
            }
            if (carousel && !disable) {
                doContainerTransform();
            }
            if (navigator.msMaxTouchPoints) {
                addClass(outerWrapper, "ms-touch");
                addEvents(outerWrapper, {
                    scroll: ie10Scroll
                });
                setSnapInterval();
            }
            if (hasNav) {
                var initIndex = !carousel ? 0 : cloneCount;
                if (navContainer) {
                    setAttrs(navContainer, {
                        "aria-label": "Carousel Pagination"
                    });
                    navItems = navContainer.children;
                    [].forEach.call(navItems, function(item, index) {
                        setAttrs(item, {
                            "data-nav": index,
                            tabindex: "-1",
                            "aria-selected": "false",
                            "aria-controls": slideItems[initIndex + index].id
                        });
                    });
                } else {
                    var navHtml = "";
                    for (var i = 0; i < slideCount; i++) {
                        navHtml += '<button data-nav="' + i + '" tabindex="-1" aria-selected="false" aria-controls="' + slideItems[initIndex + i].id + '" hidden type="button"></button>';
                    }
                    navHtml = '<div class="tns-nav" aria-label="Carousel Pagination">' + navHtml + "</div>";
                    outerWrapper.insertAdjacentHTML("afterbegin", navHtml);
                    navContainer = outerWrapper.querySelector(".tns-nav");
                    navItems = navContainer.children;
                    updateNavVisibility();
                }
                if (TRANSITIONDURATION) {
                    var prefix = TRANSITIONDURATION.substring(0, TRANSITIONDURATION.length - 18).toLowerCase(), str = "transition: all " + speed / 1e3 + "s";
                    if (prefix) {
                        str = "-" + prefix + "-" + str;
                    }
                    addCSSRule(sheet, "[aria-controls^=" + slideId + "-item]", str, getCssRulesLength(sheet));
                }
                setAttrs(navItems[0], {
                    tabindex: "0",
                    "aria-selected": "true"
                });
                addClass(navItems[0], navActiveClass);
                addEvents(navContainer, navEvents);
                if (!nav) {
                    hideElement(navContainer);
                }
            }
            if (hasAutoplay) {
                var txt = autoplay ? "stop" : "start";
                if (autoplayButton) {
                    setAttrs(autoplayButton, {
                        "data-action": txt
                    });
                } else if (options.autoplayButtonOutput) {
                    innerWrapper.insertAdjacentHTML("beforebegin", '<button data-action="' + txt + '" type="button">' + autoplayHtmlStrings[0] + txt + autoplayHtmlStrings[1] + autoplayText[0] + "</button>");
                    autoplayButton = outerWrapper.querySelector("[data-action]");
                }
                if (autoplayButton) {
                    addEvents(autoplayButton, {
                        click: toggleAnimation
                    });
                }
                if (!autoplay) {
                    if (autoplayButton) {
                        hideElement(autoplayButton);
                    }
                } else {
                    startAction();
                    if (autoplayHoverPause) {
                        addEvents(container, hoverEvents);
                    }
                    if (autoplayResetOnVisibility) {
                        addEvents(container, visibilityEvent);
                    }
                }
            }
            if (hasControls) {
                if (controlsContainer) {
                    prevButton = controlsContainer.children[0];
                    nextButton = controlsContainer.children[1];
                    setAttrs(controlsContainer, {
                        "aria-label": "Carousel Navigation",
                        tabindex: "0"
                    });
                    setAttrs(prevButton, {
                        "data-controls": "prev"
                    });
                    setAttrs(nextButton, {
                        "data-controls": "next"
                    });
                    setAttrs(controlsContainer.children, {
                        "aria-controls": slideId,
                        tabindex: "-1"
                    });
                } else {
                    outerWrapper.insertAdjacentHTML("afterbegin", '<div class="tns-controls" aria-label="Carousel Navigation" tabindex="0"><button data-controls="prev" tabindex="-1" aria-controls="' + slideId + '" type="button">' + controlsText[0] + '</button><button data-controls="next" tabindex="-1" aria-controls="' + slideId + '" type="button">' + controlsText[1] + "</button></div>");
                    controlsContainer = outerWrapper.querySelector(".tns-controls");
                    prevButton = controlsContainer.children[0];
                    nextButton = controlsContainer.children[1];
                }
                prevIsButton = isButton(prevButton);
                nextIsButton = isButton(nextButton);
                if (!loop) {
                    disEnableElement(prevIsButton, prevButton, true);
                }
                addEvents(controlsContainer, controlsEvents);
                if (!controls) {
                    hideElement(controlsContainer);
                }
            }
            if (touch) {
                addEvents(container, touchEvents);
            }
            if (mouseDrag) {
                addEvents(container, dragEvents);
            }
            if (arrowKeys) {
                addEvents(doc, docmentKeydownEvent);
            }
            if (nested === "inner") {
                events.on("outerResized", function() {
                    resizeTasks();
                    events.emit("innerLoaded", info());
                });
            } else {
                addEvents(win, {
                    resize: onResize
                });
                if (nested === "outer") {
                    events.on("innerLoaded", runAutoHeight);
                }
            }
            lazyLoad();
            runAutoHeight();
            toggleSlideDisplayAndEdgePadding();
            events.on("indexChanged", additionalUpdates);
            if (typeof onInit === "function") {
                onInit(info());
            }
            if (nested === "inner") {
                events.emit("innerLoaded", info());
            }
            if (disable) {
                disableSlider(true);
            }
        })();
        function onResize(e) {
            e = e || win.event;
            clearTimeout(resizeTimer);
            resizeTimer = setTimeout(function() {
                var newWW = getWindowWidth();
                if (windowWidth !== newWW) {
                    windowWidth = newWW;
                    resizeTasks();
                    if (nested === "outer") {
                        events.emit("outerResized", info(e));
                    }
                }
            }, 100);
        }
        function resizeTasks() {
            var breakpointZoneTem = breakpointZone, indexTem = index, itemsTem = items, freezeTem = freeze;
            vpOuter = outerWrapper.clientWidth;
            vpInner = innerWrapper.clientWidth;
            if (breakpoints) {
                setBreakpointZone();
            }
            if (breakpointZoneTem !== breakpointZone || fixedWidth) {
                var slideByTem = slideBy, arrowKeysTem = arrowKeys, autoHeightTem = autoHeight, fixedWidthTem = fixedWidth, edgePaddingTem = edgePadding, gutterTem = gutter, disableTem = disable;
                items = getOption("items");
                slideBy = getOption("slideBy");
                disable = getOption("disable");
                freeze = disable ? true : freezable ? slideCount <= items : false;
                if (items !== itemsTem) {
                    indexMax = slideCountNew - items;
                    updateIndex();
                }
                if (disable !== disableTem) {
                    disableSlider(disable);
                }
                if (freeze !== freezeTem) {
                    if (freeze) {
                        index = !carousel ? 0 : cloneCount;
                    }
                    toggleSlideDisplayAndEdgePadding();
                }
                if (breakpointZoneTem !== breakpointZone) {
                    speed = getOption("speed");
                    edgePadding = getOption("edgePadding");
                    gutter = getOption("gutter");
                    fixedWidth = getOption("fixedWidth");
                    if (!disable && fixedWidth !== fixedWidthTem) {
                        doContainerTransform();
                    }
                    autoHeight = getOption("autoHeight");
                    if (autoHeight !== autoHeightTem) {
                        if (!autoHeight) {
                            innerWrapper.style.height = "";
                        }
                    }
                }
                arrowKeys = freeze ? false : getOption("arrowKeys");
                if (arrowKeys !== arrowKeysTem) {
                    arrowKeys ? addEvents(doc, docmentKeydownEvent) : removeEvents(doc, docmentKeydownEvent);
                }
                if (hasControls) {
                    var controlsTem = controls, controlsTextTem = controlsText;
                    controls = freeze ? false : getOption("controls");
                    controlsText = getOption("controlsText");
                    if (controls !== controlsTem) {
                        controls ? showElement(controlsContainer) : hideElement(controlsContainer);
                    }
                    if (controlsText !== controlsTextTem) {
                        prevButton.innerHTML = controlsText[0];
                        nextButton.innerHTML = controlsText[1];
                    }
                }
                if (hasNav) {
                    var navTem = nav;
                    nav = freeze ? false : getOption("nav");
                    if (nav !== navTem) {
                        if (nav) {
                            showElement(navContainer);
                            updateNavVisibility();
                        } else {
                            hideElement(navContainer);
                        }
                    }
                }
                if (hasTouch) {
                    var touchTem = touch;
                    touch = freeze ? false : getOption("touch");
                    if (touch !== touchTem && carousel) {
                        touch ? addEvents(container, touchEvents) : removeEvents(container, touchEvents);
                    }
                }
                if (hasMouseDrag) {
                    var mouseDragTem = mouseDrag;
                    mouseDrag = freeze ? false : getOption("mouseDrag");
                    if (mouseDrag !== mouseDragTem && carousel) {
                        mouseDrag ? addEvents(container, dragEvents) : removeEvents(container, dragEvents);
                    }
                }
                if (hasAutoplay) {
                    var autoplayTem = autoplay, autoplayHoverPauseTem = autoplayHoverPause, autoplayResetOnVisibilityTem = autoplayResetOnVisibility, autoplayTextTem = autoplayText;
                    if (freeze) {
                        autoplay = autoplayHoverPause = autoplayResetOnVisibility = false;
                    } else {
                        autoplay = getOption("autoplay");
                        if (autoplay) {
                            autoplayHoverPause = getOption("autoplayHoverPause");
                            autoplayResetOnVisibility = getOption("autoplayResetOnVisibility");
                        } else {
                            autoplayHoverPause = autoplayResetOnVisibility = false;
                        }
                    }
                    autoplayText = getOption("autoplayText");
                    autoplayTimeout = getOption("autoplayTimeout");
                    if (autoplay !== autoplayTem) {
                        if (autoplay) {
                            if (autoplayButton) {
                                showElement(autoplayButton);
                            }
                            if (!animating) {
                                startAction();
                            }
                        } else {
                            if (autoplayButton) {
                                hideElement(autoplayButton);
                            }
                            if (animating) {
                                stopAction();
                            }
                        }
                    }
                    if (autoplayHoverPause !== autoplayHoverPauseTem) {
                        autoplayHoverPause ? addEvents(container, hoverEvents) : removeEvents(container, hoverEvents);
                    }
                    if (autoplayResetOnVisibility !== autoplayResetOnVisibilityTem) {
                        autoplayResetOnVisibility ? addEvents(doc, visibilityEvent) : removeEvents(doc, visibilityEvent);
                    }
                    if (autoplayButton && autoplayText !== autoplayTextTem) {
                        var i = autoplay ? 1 : 0, html = autoplayButton.innerHTML, len = html.length - autoplayTextTem[i].length;
                        if (html.substring(len) === autoplayTextTem[i]) {
                            autoplayButton.innerHTML = html.substring(0, len) + autoplayText[i];
                        }
                    }
                }
                if (!CSSMQ) {
                    if (!freeze && (edgePadding !== edgePaddingTem || gutter !== gutterTem)) {
                        innerWrapper.style.cssText = getInnerWrapperStyles(edgePadding, gutter, fixedWidth);
                    }
                    if (carousel && horizontal && (fixedWidth !== fixedWidthTem || gutter !== gutterTem || items !== itemsTem)) {
                        container.style.width = getContainerWidth(fixedWidth, gutter, items);
                    }
                    if (horizontal && (items !== itemsTem || gutter !== gutterTem)) {
                        var str = getSlideWidthStyle(fixedWidth, gutter, items) + getSlideGutterStyle(gutter);
                        sheet.removeRule(getCssRulesLength(sheet) - 1);
                        addCSSRule(sheet, "#" + slideId + " > .tns-item", str, getCssRulesLength(sheet));
                    }
                    if (!fixedWidth && index === indexTem) {
                        doTransform(0);
                    }
                }
                if (index !== indexTem) {
                    events.emit("indexChanged", info());
                    doTransform(0);
                    indexCached = index;
                }
                if (items !== itemsTem) {
                    additionalUpdates();
                    runAutoHeight();
                    if (navigator.msMaxTouchPoints) {
                        setSnapInterval();
                    }
                }
            }
            if (!horizontal && !disable) {
                getSlideOffsetTops();
                updateContentWrapperHeight();
                doContainerTransform();
            }
            if (fixedWidth && edgePadding) {
                if (freeze || vpOuter <= fixedWidth + gutter) {
                    if (innerWrapper.style.margin !== "0px") {
                        innerWrapper.style.margin = "0px";
                    }
                } else {
                    innerWrapper.style.cssText = getInnerWrapperStyles(edgePadding, gutter, fixedWidth);
                }
            }
            runAutoHeight();
        }
        function setBreakpointZone() {
            breakpointZone = 0;
            breakpoints.forEach(function(bp, i) {
                if (windowWidth >= bp) {
                    breakpointZone = i + 1;
                }
            });
        }
        var updateIndex = function() {
            return loop ? function() {
                var leftEdge = indexMin + slideBy, rightEdge = indexMax - slideBy;
                if (edgePadding) {
                    leftEdge += 1;
                    rightEdge -= 1;
                } else if (fixedWidth) {
                    var gt = gutter ? gutter : 0;
                    if (vpOuter % (fixedWidth + gt) > gt) {
                        rightEdge -= 1;
                    }
                }
                if (index > rightEdge) {
                    while (index >= leftEdge + slideCount) {
                        index -= slideCount;
                    }
                } else if (index < leftEdge) {
                    while (index <= rightEdge - slideCount) {
                        index += slideCount;
                    }
                }
            } : function() {
                index = Math.max(indexMin, Math.min(indexMax, index));
            };
        }();
        function toggleSlideDisplayAndEdgePadding() {
            if (cloneCount) {
                var str = "tns-transparent";
                if (freeze) {
                    if (!hasClass(slideItems[0], str)) {
                        if (edgePadding) {
                            innerWrapper.style.margin = "0px";
                        }
                        for (var i = cloneCount; i--; ) {
                            addClass(slideItems[i], str);
                            addClass(slideItems[slideCountNew - i - 1], str);
                        }
                    }
                } else {
                    if (edgePadding && !fixedWidth && CSSMQ && innerWrapper.style.margin) {
                        innerWrapper.style.margin = "";
                    }
                    if (hasClass(slideItems[0], str)) {
                        for (var i = cloneCount; i--; ) {
                            removeClass(slideItems[i], str);
                            removeClass(slideItems[slideCountNew - i - 1], str);
                        }
                    }
                }
            }
        }
        function disableSlider(disable) {
            var len = slideItems.length;
            if (disable) {
                sheet.disabled = true;
                container.className = container.className.replace(classContainer.substring(1), "");
                container.style = "";
                if (loop) {
                    for (var j = cloneCount; j--; ) {
                        if (carousel) {
                            hideElement(slideItems[j]);
                        }
                        hideElement(slideItems[len - j - 1]);
                    }
                }
                if (!horizontal || !carousel) {
                    innerWrapper.style = "";
                }
                if (!carousel) {
                    for (var i = index; i < index + slideCount; i++) {
                        var item = slideItems[i];
                        item.style = "";
                        removeClass(item, animateIn);
                        removeClass(item, animateNormal);
                    }
                }
            } else {
                sheet.disabled = false;
                container.className += classContainer;
                if (!horizontal) {
                    getSlideOffsetTops();
                }
                doContainerTransform();
                if (loop) {
                    for (var j = cloneCount; j--; ) {
                        if (carousel) {
                            showElement(slideItems[j]);
                        }
                        showElement(slideItems[len - j - 1]);
                    }
                }
                if (!carousel) {
                    for (var i = index; i < index + slideCount; i++) {
                        var item = slideItems[i], classN = i < index + items ? animateIn : animateNormal;
                        item.style.left = (i - index) * 100 / items + "%";
                        addClass(item, classN);
                    }
                }
            }
        }
        function mouseoverPause() {
            if (animating) {
                stopAction();
                autoplayHoverStopped = true;
            }
        }
        function mouseoutRestart() {
            if (!animating && autoplayHoverStopped) {
                startAction();
                autoplayHoverStopped = false;
            }
        }
        function lazyLoad() {
            if (lazyload && !disable) {
                var i = index, len = index + items;
                if (edgePadding) {
                    i -= 1;
                    len += 1;
                }
                for (;i < len; i++) {
                    [].forEach.call(slideItems[i].querySelectorAll(".tns-lazy-img"), function(img) {
                        var eve = {};
                        eve[TRANSITIONEND] = function(e) {
                            e.stopPropagation();
                        };
                        addEvents(img, eve);
                        if (!hasClass(img, "loaded")) {
                            img.src = getAttr(img, "data-src");
                            addClass(img, "loaded");
                        }
                    });
                }
            }
        }
        function runAutoHeight() {
            if (autoHeight && !disable) {
                var images = [];
                for (var i = index; i < index + items; i++) {
                    [].forEach.call(slideItems[i].querySelectorAll("img"), function(img) {
                        images.push(img);
                    });
                }
                if (images.length === 0) {
                    updateInnerWrapperHeight();
                } else {
                    checkImagesLoaded(images);
                }
            }
        }
        function checkImagesLoaded(images) {
            images.forEach(function(img, index) {
                if (imageLoaded(img)) {
                    images.splice(index, 1);
                }
            });
            if (images.length === 0) {
                updateInnerWrapperHeight();
            } else {
                setTimeout(function() {
                    checkImagesLoaded(images);
                }, 16);
            }
        }
        function additionalUpdates() {
            lazyLoad();
            updateSlideStatus();
            updateControlsStatus();
            updateNavVisibility();
            updateNavStatus();
        }
        function updateInnerWrapperHeight() {
            var heights = [], maxHeight;
            for (var i = index; i < index + items; i++) {
                heights.push(slideItems[i].offsetHeight);
            }
            maxHeight = Math.max.apply(null, heights);
            if (innerWrapper.style.height !== maxHeight) {
                if (TRANSITIONDURATION) {
                    setDurations(speed);
                }
                innerWrapper.style.height = maxHeight + "px";
            }
        }
        function getSlideOffsetTops() {
            slideOffsetTops = [ 0 ];
            var topFirst = slideItems[0].getBoundingClientRect().top, attr;
            for (var i = 1; i < slideCountNew; i++) {
                attr = slideItems[i].getBoundingClientRect().top;
                slideOffsetTops.push(attr - topFirst);
            }
        }
        function setSnapInterval() {
            outerWrapper.style.msScrollSnapPointsX = "snapInterval(0%, " + 100 / items + "%)";
        }
        function updateSlideStatus() {
            for (var i = slideCountNew; i--; ) {
                var item = slideItems[i];
                if (i >= index && i < index + items) {
                    if (hasAttr(item, "tabindex")) {
                        setAttrs(item, {
                            "aria-hidden": "false"
                        });
                        removeAttrs(item, [ "tabindex" ]);
                        addClass(item, slideActiveClass);
                    }
                } else {
                    if (!hasAttr(item, "tabindex")) {
                        setAttrs(item, {
                            "aria-hidden": "true",
                            tabindex: "-1"
                        });
                    }
                    if (hasClass(item, slideActiveClass)) {
                        removeClass(item, slideActiveClass);
                    }
                }
            }
        }
        function updateNavStatus() {
            if (nav) {
                navCurrentIndex = navClicked !== -1 ? navClicked : index % slideCount;
                navClicked = -1;
                if (navCurrentIndex !== navCurrentIndexCached) {
                    var navPrev = navItems[navCurrentIndexCached], navCurrent = navItems[navCurrentIndex];
                    setAttrs(navPrev, {
                        tabindex: "-1",
                        "aria-selected": "false"
                    });
                    setAttrs(navCurrent, {
                        tabindex: "0",
                        "aria-selected": "true"
                    });
                    removeClass(navPrev, navActiveClass);
                    addClass(navCurrent, navActiveClass);
                }
            }
        }
        function isButton(el) {
            return el.nodeName.toLowerCase() === "button";
        }
        function isAriaDisabled(el) {
            return el.getAttribute("aria-disabled") === "true";
        }
        function disEnableElement(isButton, el, val) {
            if (isButton) {
                el.disabled = val;
            } else {
                el.setAttribute("aria-disabled", val.toString());
            }
        }
        function updateControlsStatus() {
            if (!controls || loop) {
                return;
            }
            var prevDisabled = prevIsButton ? prevButton.disabled : isAriaDisabled(prevButton), nextDisabled = nextIsButton ? nextButton.disabled : isAriaDisabled(nextButton), disablePrev = index === indexMin ? true : false, disableNext = !rewind && index === indexMax ? true : false;
            if (disablePrev && !prevDisabled) {
                disEnableElement(prevIsButton, prevButton, true);
            }
            if (!disablePrev && prevDisabled) {
                disEnableElement(prevIsButton, prevButton, false);
            }
            if (disableNext && !nextDisabled) {
                disEnableElement(nextIsButton, nextButton, true);
            }
            if (!disableNext && nextDisabled) {
                disEnableElement(nextIsButton, nextButton, false);
            }
        }
        function setDurations(duration, target) {
            duration = !duration ? "" : duration / 1e3 + "s";
            target = target || container;
            target.style[TRANSITIONDURATION] = duration;
            if (!carousel) {
                target.style[ANIMATIONDURATION] = duration;
            }
            if (!horizontal) {
                innerWrapper.style[TRANSITIONDURATION] = duration;
            }
        }
        function getContainerTransformValue() {
            var val;
            if (horizontal) {
                if (fixedWidth) {
                    val = -(fixedWidth + gutter) * index + "px";
                } else {
                    var denominator = TRANSFORM ? slideCountNew : items;
                    val = -index * 100 / denominator + "%";
                }
            } else {
                val = -slideOffsetTops[index] + "px";
            }
            return val;
        }
        function doContainerTransform(val) {
            if (!val) {
                val = getContainerTransformValue();
            }
            container.style[transformAttr] = transformPrefix + val + transformPostfix;
        }
        function animateSlide(number, classOut, classIn, isOut) {
            for (var i = number, l = number + items; i < l; i++) {
                var item = slideItems[i];
                if (!isOut) {
                    item.style.left = (i - index) * 100 / items + "%";
                }
                if (TRANSITIONDURATION) {
                    setDurations(speed, item);
                }
                if (animateDelay && TRANSITIONDELAY) {
                    item.style[TRANSITIONDELAY] = item.style[ANIMATIONDELAY] = animateDelay * (i - number) / 1e3 + "s";
                }
                removeClass(item, classOut);
                addClass(item, classIn);
                if (isOut) {
                    slideItemsOut.push(item);
                }
            }
        }
        var transformCore = function() {
            return carousel ? function(duration, distance) {
                if (!distance) {
                    distance = getContainerTransformValue();
                }
                if (hasRightDeadZone && index === indexMax) {
                    distance = -((fixedWidth + gutter) * slideCountNew - vpInner) + "px";
                }
                if (TRANSITIONDURATION || !duration) {
                    doContainerTransform(distance);
                    if (speed === 0) {
                        onTransitionEnd();
                    }
                } else {
                    jsTransform(container, transformAttr, transformPrefix, transformPostfix, distance, speed, onTransitionEnd);
                }
                if (!horizontal) {
                    updateContentWrapperHeight();
                }
            } : function() {
                slideItemsOut = [];
                var eve = {};
                eve[TRANSITIONEND] = eve[ANIMATIONEND] = onTransitionEnd;
                removeEvents(slideItems[indexCached], eve);
                addEvents(slideItems[index], eve);
                animateSlide(indexCached, animateIn, animateOut, true);
                animateSlide(index, animateNormal, animateIn);
                if (!TRANSITIONEND || !ANIMATIONEND || speed === 0) {
                    setTimeout(onTransitionEnd, 0);
                }
            };
        }();
        function doTransform(duration, distance) {
            if (duration === undefined) {
                duration = speed;
            }
            if (TRANSITIONDURATION) {
                setDurations(duration);
            }
            transformCore(duration, distance);
        }
        function render(e, sliderMoved) {
            if (updateIndexBeforeTransform) {
                updateIndex();
            }
            if (index !== indexCached || sliderMoved) {
                events.emit("indexChanged", info());
                events.emit("transitionStart", info());
                if (animating && e && [ "click", "keydown" ].indexOf(e.type) >= 0) {
                    stopAction();
                }
                running = true;
                doTransform();
            }
        }
        function strTrans(str) {
            return str.toLowerCase().replace(/-/g, "");
        }
        function onTransitionEnd(event) {
            if (carousel || running) {
                events.emit("transitionEnd", info(event));
                if (!carousel && slideItemsOut.length > 0) {
                    for (var i = 0; i < items; i++) {
                        var item = slideItemsOut[i];
                        item.style.left = "";
                        if (TRANSITIONDURATION) {
                            setDurations(0, item);
                        }
                        if (animateDelay && TRANSITIONDELAY) {
                            item.style[TRANSITIONDELAY] = item.style[ANIMATIONDELAY] = "";
                        }
                        removeClass(item, animateOut);
                        addClass(item, animateNormal);
                    }
                }
                if (!event || !carousel && event.target.parentNode === container || event.target === container && strTrans(event.propertyName) === strTrans(transformAttr)) {
                    if (!updateIndexBeforeTransform) {
                        var indexTem = index;
                        updateIndex();
                        if (index !== indexTem) {
                            events.emit("indexChanged", info());
                            if (TRANSITIONDURATION) {
                                setDurations(0);
                            }
                            doContainerTransform();
                        }
                    }
                    runAutoHeight();
                    if (nested === "inner") {
                        events.emit("innerLoaded", info());
                    }
                    running = false;
                    navCurrentIndexCached = navCurrentIndex;
                    indexCached = index;
                }
            }
        }
        function goTo(targetIndex, e) {
            if (freeze) {
                return;
            }
            if (targetIndex === "prev") {
                onControlsClick(e, -1);
            } else if (targetIndex === "next") {
                onControlsClick(e, 1);
            } else if (!running) {
                var absIndex = index % slideCount, indexGap = 0;
                if (absIndex < 0) {
                    absIndex += slideCount;
                }
                if (targetIndex === "first") {
                    indexGap = -absIndex;
                } else if (targetIndex === "last") {
                    indexGap = slideCount - items - absIndex;
                } else {
                    if (typeof targetIndex !== "number") {
                        targetIndex = parseInt(targetIndex);
                    }
                    if (!isNaN(targetIndex)) {
                        var absTargetIndex = targetIndex % slideCount;
                        if (absTargetIndex < 0) {
                            absTargetIndex += slideCount;
                        }
                        indexGap = absTargetIndex - absIndex;
                    }
                }
                index += indexGap;
                if (index % slideCount !== indexCached % slideCount) {
                    render(e);
                }
            }
        }
        function onControlsClick(e, dir) {
            if (!running) {
                var passEventObject;
                if (!dir) {
                    e = e || win.event;
                    var target = e.target || e.srcElement;
                    while (target !== controlsContainer && [ prevButton, nextButton ].indexOf(target) < 0) {
                        target = target.parentNode;
                    }
                    var targetIn = [ prevButton, nextButton ].indexOf(target);
                    if (targetIn >= 0) {
                        passEventObject = true;
                        dir = targetIn === 0 ? -1 : 1;
                    }
                }
                if (dir === -1) {
                    index -= slideBy;
                } else if (dir === 1) {
                    if (rewind && index === indexMax) {
                        goTo(0, e);
                        return;
                    } else {
                        index += slideBy;
                    }
                }
                render(passEventObject || e && e.type === "keydown" ? e : null);
            }
        }
        function onNavClick(e) {
            if (!running) {
                e = e || win.event;
                var target = e.target || e.srcElement, navIndex;
                while (target !== navContainer && !hasAttr(target, "data-nav")) {
                    target = target.parentNode;
                }
                if (hasAttr(target, "data-nav")) {
                    navIndex = navClicked = [].indexOf.call(navItems, target);
                    goTo(navIndex, e);
                }
            }
        }
        function updateAutoplayButton(action, txt) {
            setAttrs(autoplayButton, {
                "data-action": action
            });
            autoplayButton.innerHTML = autoplayHtmlStrings[0] + action + autoplayHtmlStrings[1] + txt;
        }
        function startAction() {
            resetActionTimer();
            if (autoplayButton) {
                updateAutoplayButton("stop", autoplayText[1]);
            }
            animating = true;
        }
        function stopAction() {
            pauseActionTimer();
            if (autoplayButton) {
                updateAutoplayButton("start", autoplayText[0]);
            }
            animating = false;
        }
        function pauseActionTimer() {
            animating = "paused";
            clearInterval(autoplayTimer);
        }
        function resetActionTimer() {
            if (animating === true) {
                return;
            }
            clearInterval(autoplayTimer);
            autoplayTimer = setInterval(function() {
                onControlsClick(null, autoplayDirection);
            }, autoplayTimeout);
        }
        function toggleAnimation() {
            if (animating) {
                stopAction();
            } else {
                startAction();
            }
        }
        function onVisibilityChange() {
            if (autoplayResetVisibilityState != doc.hidden && animating !== false) {
                doc.hidden ? pauseActionTimer() : resetActionTimer();
            }
            autoplayResetVisibilityState = doc.hidden;
        }
        function onDocumentKeydown(e) {
            e = e || win.event;
            switch (e.keyCode) {
              case KEYS.LEFT:
                onControlsClick(e, -1);
                break;

              case KEYS.RIGHT:
                onControlsClick(e, 1);
            }
        }
        function onControlsKeydown(e) {
            e = e || win.event;
            var code = e.keyCode;
            switch (code) {
              case KEYS.LEFT:
              case KEYS.UP:
              case KEYS.PAGEUP:
                if (!prevButton.disabled) {
                    onControlsClick(e, -1);
                }
                break;

              case KEYS.RIGHT:
              case KEYS.DOWN:
              case KEYS.PAGEDOWN:
                if (!nextButton.disabled) {
                    onControlsClick(e, 1);
                }
                break;

              case KEYS.HOME:
                goTo(0, e);
                break;

              case KEYS.END:
                goTo(slideCount - 1, e);
                break;
            }
        }
        function setFocus(focus) {
            focus.focus();
        }
        function onNavKeydown(e) {
            var curElement = doc.activeElement;
            if (!hasAttr(curElement, "data-nav")) {
                return;
            }
            e = e || win.event;
            var code = e.keyCode, navIndex = [].indexOf.call(navItems, curElement), len = visibleNavIndexes.length, current = visibleNavIndexes.indexOf(navIndex);
            if (options.navContainer) {
                len = slideCount;
                current = navIndex;
            }
            function getNavIndex(num) {
                return options.navContainer ? num : visibleNavIndexes[num];
            }
            switch (code) {
              case KEYS.LEFT:
              case KEYS.PAGEUP:
                if (current > 0) {
                    setFocus(navItems[getNavIndex(current - 1)]);
                }
                break;

              case KEYS.UP:
              case KEYS.HOME:
                if (current > 0) {
                    setFocus(navItems[getNavIndex(0)]);
                }
                break;

              case KEYS.RIGHT:
              case KEYS.PAGEDOWN:
                if (current < len - 1) {
                    setFocus(navItems[getNavIndex(current + 1)]);
                }
                break;

              case KEYS.DOWN:
              case KEYS.END:
                if (current < len - 1) {
                    setFocus(navItems[getNavIndex(len - 1)]);
                }
                break;

              case KEYS.ENTER:
              case KEYS.SPACE:
                navClicked = navIndex;
                goTo(navIndex, e);
                break;
            }
        }
        function ie10Scroll() {
            doTransform(0, container.scrollLeft());
            indexCached = index;
        }
        function getTarget(e) {
            return e.target || e.srcElement;
        }
        function isTouchEvent(e) {
            return e.type.indexOf("touch") >= 0;
        }
        function preventDefaultBehavior(e) {
            if (e.preventDefault) {
                e.preventDefault();
            } else {
                e.returnValue = false;
            }
        }
        function onTouchOrMouseStart(e) {
            moveDirectionExpected = 0;
            touchedOrDraged = false;
            startX = startY = null;
            if (!running) {
                e = e || win.event;
                var ev;
                if (isTouchEvent(e)) {
                    ev = e.changedTouches[0];
                    events.emit("touchStart", info(e));
                } else {
                    ev = e;
                    preventDefaultBehavior(e);
                    events.emit("dragStart", info(e));
                }
                startX = parseInt(ev.clientX);
                startY = parseInt(ev.clientY);
                translateInit = parseFloat(container.style[transformAttr].replace(transformPrefix, "").replace(transformPostfix, ""));
            }
        }
        function onTouchOrMouseMove(e) {
            if (!running && startX !== null) {
                e = e || win.event;
                var ev;
                if (isTouchEvent(e)) {
                    ev = e.changedTouches[0];
                } else {
                    ev = e;
                    preventDefaultBehavior(e);
                }
                disX = parseInt(ev.clientX) - startX;
                disY = parseInt(ev.clientY) - startY;
                if (moveDirectionExpected === 0) {
                    moveDirectionExpected = getTouchDirection(toDegree(disY, disX), 15) === options.axis;
                }
                if (moveDirectionExpected) {
                    if (isTouchEvent(e)) {
                        events.emit("touchMove", info(e));
                    } else {
                        if (!isDragEvent) {
                            isDragEvent = true;
                        }
                        events.emit("dragMove", info(e));
                    }
                    if (!touchedOrDraged) {
                        touchedOrDraged = true;
                    }
                    var x = translateInit;
                    if (horizontal) {
                        if (fixedWidth) {
                            x += disX;
                            x += "px";
                        } else {
                            var percentageX = TRANSFORM ? disX * items * 100 / (vpInner * slideCountNew) : disX * 100 / vpInner;
                            x += percentageX;
                            x += "%";
                        }
                    } else {
                        x += disY;
                        x += "px";
                    }
                    if (TRANSFORM) {
                        setDurations(0);
                    }
                    container.style[transformAttr] = transformPrefix + x + transformPostfix;
                }
            }
        }
        function onTouchOrMouseEnd(e) {
            if (!running && touchedOrDraged) {
                e = e || win.event;
                var ev;
                if (isTouchEvent(e)) {
                    ev = e.changedTouches[0];
                    events.emit("touchEnd", info(e));
                } else {
                    ev = e;
                    events.emit("dragEnd", info(e));
                }
                disX = parseInt(ev.clientX) - startX;
                disY = parseInt(ev.clientY) - startY;
                var sliderMoved = Boolean(horizontal ? disX : disY);
                moveDirectionExpected = 0;
                touchedOrDraged = false;
                startX = startY = null;
                if (horizontal) {
                    var indexMoved = -disX * items / vpInner;
                    indexMoved = disX > 0 ? Math.floor(indexMoved) : Math.ceil(indexMoved);
                    index += indexMoved;
                } else {
                    var moved = -(translateInit + disY);
                    if (moved <= 0) {
                        index = indexMin;
                    } else if (moved >= slideOffsetTops[slideOffsetTops.length - 1]) {
                        index = indexMax;
                    } else {
                        var i = 0;
                        do {
                            i++;
                            index = disY < 0 ? i + 1 : i;
                        } while (i < slideCountNew && moved >= slideOffsetTops[i + 1]);
                    }
                }
                render(e, sliderMoved);
                if (isDragEvent) {
                    isDragEvent = false;
                    var target = getTarget(e);
                    addEvents(target, {
                        click: function preventClick(e) {
                            preventDefaultBehavior(e);
                            removeEvents(target, {
                                click: preventClick
                            });
                        }
                    });
                }
            }
        }
        function updateContentWrapperHeight() {
            innerWrapper.style.height = slideOffsetTops[index + items] - slideOffsetTops[index] + "px";
        }
        function getVisibleNavIndex() {
            visibleNavIndexes = [];
            var absIndexMin = index % slideCount % items;
            while (absIndexMin < slideCount) {
                if (!loop && absIndexMin + items > slideCount) {
                    absIndexMin = slideCount - items;
                }
                visibleNavIndexes.push(absIndexMin);
                absIndexMin += items;
            }
            if (loop && visibleNavIndexes.length * items < slideCount || !loop && visibleNavIndexes[0] > 0) {
                visibleNavIndexes.unshift(0);
            }
        }
        function updateNavVisibility() {
            if (!nav || options.navContainer) {
                return;
            }
            if (visibleNavIndexes.indexOf(index % slideCount) < 0) {
                getVisibleNavIndex();
                if (visibleNavIndexes !== visibleNavIndexesCached) {
                    if (visibleNavIndexesCached.length > 0) {
                        visibleNavIndexesCached.forEach(function(ind) {
                            hideElement(navItems[ind]);
                        });
                    }
                    if (visibleNavIndexes.length > 0) {
                        visibleNavIndexes.forEach(function(ind) {
                            showElement(navItems[ind]);
                        });
                    }
                    visibleNavIndexesCached = visibleNavIndexes;
                }
            }
        }
        function info(e) {
            return {
                container: container,
                slideItems: slideItems,
                navContainer: navContainer,
                navItems: navItems,
                controlsContainer: controlsContainer,
                hasControls: hasControls,
                prevButton: prevButton,
                nextButton: nextButton,
                items: items,
                slideBy: slideBy,
                cloneCount: cloneCount,
                slideCount: slideCount,
                slideCountNew: slideCountNew,
                index: index,
                indexCached: indexCached,
                navCurrentIndex: navCurrentIndex,
                navCurrentIndexCached: navCurrentIndexCached,
                visibleNavIndexes: visibleNavIndexes,
                visibleNavIndexesCached: visibleNavIndexesCached,
                event: e || {}
            };
        }
        return {
            getInfo: info,
            events: events,
            goTo: goTo,
            destroy: function() {
                sheet.disabled = true;
                if (loop) {
                    for (var j = cloneCount; j--; ) {
                        if (carousel) {
                            slideItems[0].remove();
                        }
                        slideItems[slideItems.length - 1].remove();
                    }
                }
                var slideClasses = [ "tns-item", slideActiveClass ];
                if (!carousel) {
                    slideClasses = slideClasses.concat("tns-normal", animateIn);
                }
                for (var i = slideCount; i--; ) {
                    var slide = slideItems[i];
                    if (slide.id.indexOf(slideId + "-item") >= 0) {
                        slide.id = "";
                    }
                    slideClasses.forEach(function(cl) {
                        removeClass(slide, cl);
                    });
                }
                removeAttrs(slideItems, [ "style", "aria-hidden", "tabindex" ]);
                slideItems = slideId = slideCount = slideCountNew = cloneCount = null;
                if (controls) {
                    removeEvents(controlsContainer, controlsEvents);
                    if (options.controlsContainer) {
                        removeAttrs(controlsContainer, [ "aria-label", "tabindex" ]);
                        removeAttrs(controlsContainer.children, [ "aria-controls", "aria-disabled", "tabindex" ]);
                    }
                    controlsContainer = prevButton = nextButton = null;
                }
                if (nav) {
                    removeEvents(navContainer, navEvents);
                    if (options.navContainer) {
                        removeAttrs(navContainer, [ "aria-label" ]);
                        removeAttrs(navItems, [ "aria-selected", "aria-controls", "tabindex" ]);
                    }
                    navContainer = navItems = null;
                }
                if (autoplay) {
                    clearInterval(autoplayTimer);
                    if (autoplayButton) {
                        removeEvents(autoplayButton, {
                            click: toggleAnimation
                        });
                    }
                    removeEvents(container, hoverEvents);
                    removeEvents(container, visibilityEvent);
                    if (options.autoplayButton) {
                        removeAttrs(autoplayButton, [ "data-action" ]);
                    }
                }
                container.id = containerIdCached || "";
                container.className = container.className.replace(classContainer, "");
                container.style = "";
                if (carousel && TRANSITIONEND) {
                    var eve = {};
                    eve[TRANSITIONEND] = onTransitionEnd;
                    removeEvents(container, eve);
                }
                removeEvents(container, touchEvents);
                removeEvents(container, dragEvents);
                containerParent.insertBefore(container, outerWrapper);
                outerWrapper.remove();
                outerWrapper = innerWrapper = container = null;
                removeEvents(doc, docmentKeydownEvent);
                removeEvents(win, {
                    resize: onResize
                });
            }
        };
    };
    return tns;
}();

var SiteMenu = function() {
    var html = document.querySelector("html");
    var menuToggle = document.querySelector(".js-menu-toggle");
    var isOpen = false;
    return {
        init: function() {
            this.bindEvents();
        },
        bindEvents: function() {
            menuToggle.addEventListener("click", function(e) {
                SiteMenu.transitionState();
                e.preventDefault();
            });
            window.onkeydown = function(e) {
                if (isOpen && e.keyCode === 27) {
                    SiteMenu.transitionState();
                    e.preventDefault();
                }
            };
        },
        toggleMenu: function() {},
        transitionState: function(elem) {
            if (isOpen) {
                SiteMenu.close();
            } else {
                SiteMenu.open();
            }
        },
        close: function() {
            html.classList.add("menu-is-closing");
            setTimeout(function() {
                html.classList.remove("menu-is-open");
                html.classList.add("menu-is-closed");
                html.classList.remove("menu-is-closing");
                isOpen = false;
            }, 1e3);
        },
        open: function() {
            html.classList.add("menu-is-opening");
            setTimeout(function() {
                html.classList.remove("menu-is-closed");
                html.classList.add("menu-is-open");
                html.classList.remove("menu-is-opening");
                isOpen = true;
            }, 0);
        }
    };
}();

SiteMenu.init();

var VideoCards = function() {
    var vidCards = document.querySelectorAll(".js-vid-card");
    return {
        init: function() {
            this.bindEvents();
        },
        bindEvents: function() {
            Util.forEach(vidCards, function(index, vidCard) {
                var video = vidCard.querySelector("video");
                VideoCards.handleHover(vidCard, video);
            });
        },
        autoPlay: function(vid) {
            if (VidCards.classList.contains("js-vid-autoplay")) {
                vid.play();
            }
        },
        handleHover: function(el, vid) {
            el.addEventListener("mouseover", function() {
                vid.play();
            });
            el.addEventListener("mouseout", function() {
                vid.pause();
            });
        }
    };
}();

window.addEventListener("load", function() {
    VideoCards.init();
});

var PopUps = function() {
    var html = document.querySelector("html"), popUps = document.querySelectorAll("[data-popup]"), closeLinks = document.querySelectorAll(".js-close-popup");
    isOpen = false, isVimeo = false, isVideo = false, vid = "";
    return {
        init: function() {
            this.bindEvents();
        },
        bindEvents: function() {
            Util.forEach(popUps, function(index, popUp) {
                PopUps.checkVideos(popUp);
                popUp.addEventListener("click", function(e) {
                    e.preventDefault();
                    var targetPopup = popUp.dataset.popup, targetPopupId = document.querySelector("#" + targetPopup), vidWrap = targetPopupId.querySelector(".js-vid-wrap");
                    PopUps.open(targetPopupId);
                    if (isVimeo) PopUps.playVimeoVideo(popUp, targetPopupId, vidWrap);
                    if (isVideo) {
                        var vid = vidWrap.querySelector("video");
                        PopUps.playVideo(vid);
                    }
                    if (isOpen = true) {
                        Util.forEach(closeLinks, function(index, closeLink) {
                            closeLink.addEventListener("click", function(e) {
                                e.preventDefault();
                                PopUps.close(targetPopupId);
                                if (isVideo) PopUps.pauseVideo(vid);
                            });
                        });
                        window.onkeydown = function(e) {
                            if (e.keyCode === 27) {
                                PopUps.close(targetPopupId);
                                if (isVimeo) PopUps.stopVimeoVideo(targetPopupId, vidWrap);
                                if (isVideo) PopUps.pauseVideo(vid);
                            }
                        };
                    }
                });
            });
        },
        checkVideos: function(popUp) {
            if (popUp.hasAttribute("data-vimeo-id")) {
                isVimeo = true;
            }
            if (popUp.classList.contains("has-video")) {
                isVideo = true;
            }
        },
        open: function(el) {
            html.classList.remove("popup-is-closed");
            html.classList.add("popup-is-opening");
            el.classList.remove("is-closed");
            el.classList.add("is-open");
            setTimeout(function() {
                html.classList.remove("popup-is-opening");
                html.classList.add("popup-is-open");
                isOpen = true;
            }, 200);
        },
        close: function(el) {
            html.classList.add("popup-is-closing");
            el.classList.add("is-closing");
            setTimeout(function() {
                html.classList.remove("popup-is-open");
                el.classList.remove("is-open");
                html.classList.remove("popup-is-closing");
                html.classList.add("popup-is-closed");
                el.classList.remove("is-closing");
                el.classList.add("is-closed");
                isOpen = false;
            }, 1e3);
        },
        playVideo: function(vid) {
            vid.play();
        },
        pauseVideo: function(vid) {
            vid.pause();
        },
        playVimeoVideo: function(popUp, targetPopupId, vidWrap) {
            var vimeoID = popUp.dataset.vimeoId, vimeoColor = popUp.dataset.vimeoColor;
            vimeoPlayer = "https://player.vimeo.com/video/", vimeoApi = "http://www.vimeo.com/api/oembed.json?url=", 
            vimeoPlayerId = vimeoPlayer + vimeoID, vimeoRequest = "http://www.vimeo.com/api/oembed.json?url=" + encodeURIComponent(vimeoPlayerId) + "&color=" + vimeoColor + "&autoplay=1&callback=?";
            Util.loadJSONP(vimeoRequest, function(data) {
                console.log(data);
                vidWrap.innerHTML = unescape(data.html);
            });
        },
        stopVimeoVideo: function(targetPopupId, vidWrap) {
            while (vidWrap.firstChild) {
                vidWrap.removeChild(vidWrap.firstChild);
            }
        }
    };
}();

window.addEventListener("load", function() {
    PopUps.init();
});

var StickyNav = function(options) {
    if (!this || !(this instanceof StickyNav)) {
        return new StickyNav(options);
    }
    if (!options) {
        options = {};
    }
    this.target = options.target;
    this.fixedHeader = options.fixedHeader;
    this.offset = options.offset;
    this.throttle = options.throttle;
    if (document.querySelector(this.target)) {
        this.init();
    }
};

StickyNav.prototype = {
    init: function() {
        this.bindEvents();
    },
    bindEvents: function() {
        var el = document.querySelector(this.target);
        window.addEventListener("load", function() {
            var elHeight = this.getHeight(el);
            this.addHeight(el, elHeight);
        }.bind(this), false);
        window.addEventListener("scroll", Util.throttle(function() {
            this.sticker(el);
        }.bind(this), this.throttle), false);
    },
    scrollPos: function() {
        if (window.pageYOffset !== undefined) {
            return pageYOffset;
        } else {
            var root = document.documentElement, body = document.body, scrollY;
            scrollY = root.scrollTop || body.scrollTop || 0;
            return scrollY;
        }
    },
    sticker: function(el) {
        var fixedHeader = document.querySelector(".site-header");
        var fixedHeaderOffset = this.getElementInfo(fixedHeader).bottom;
        var newOffset = this.offset;
        if (this.fixedHeader) {
            var newOffset = fixedHeaderOffset;
        }
        if (this.scrollPos() - newOffset >= newOffset) {
            el.classList.add("is-sticky");
            el.style.top = newOffset + "px";
        } else {
            el.classList.remove("is-sticky");
        }
    },
    getElementInfo: function(el) {
        var rect = el.getBoundingClientRect();
        return {
            top: rect.top,
            bottom: rect.bottom
        };
    },
    getHeight: function(el) {
        return el.clientHeight;
    },
    addHeight: function(el, elHeight) {
        el.parentNode.style.height = elHeight + "px";
    }
};

new StickyNav({
    target: ".js-sticky",
    fixedHeader: ".site-header",
    offset: 135,
    throttle: 20
});

(function() {
    var MutationObserver, Util, WeakMap, getComputedStyle, getComputedStyleRX, bind = function(fn, me) {
        return function() {
            return fn.apply(me, arguments);
        };
    }, indexOf = [].indexOf || function(item) {
        for (var i = 0, l = this.length; i < l; i++) {
            if (i in this && this[i] === item) return i;
        }
        return -1;
    };
    Util = function() {
        function Util() {}
        Util.prototype.extend = function(custom, defaults) {
            var key, value;
            for (key in defaults) {
                value = defaults[key];
                if (custom[key] == null) {
                    custom[key] = value;
                }
            }
            return custom;
        };
        Util.prototype.isMobile = function(agent) {
            return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(agent);
        };
        Util.prototype.createEvent = function(event, bubble, cancel, detail) {
            var customEvent;
            if (bubble == null) {
                bubble = false;
            }
            if (cancel == null) {
                cancel = false;
            }
            if (detail == null) {
                detail = null;
            }
            if (document.createEvent != null) {
                customEvent = document.createEvent("CustomEvent");
                customEvent.initCustomEvent(event, bubble, cancel, detail);
            } else if (document.createEventObject != null) {
                customEvent = document.createEventObject();
                customEvent.eventType = event;
            } else {
                customEvent.eventName = event;
            }
            return customEvent;
        };
        Util.prototype.emitEvent = function(elem, event) {
            if (elem.dispatchEvent != null) {
                return elem.dispatchEvent(event);
            } else if (event in (elem != null)) {
                return elem[event]();
            } else if ("on" + event in (elem != null)) {
                return elem["on" + event]();
            }
        };
        Util.prototype.addEvent = function(elem, event, fn) {
            if (elem.addEventListener != null) {
                return elem.addEventListener(event, fn, false);
            } else if (elem.attachEvent != null) {
                return elem.attachEvent("on" + event, fn);
            } else {
                return elem[event] = fn;
            }
        };
        Util.prototype.removeEvent = function(elem, event, fn) {
            if (elem.removeEventListener != null) {
                return elem.removeEventListener(event, fn, false);
            } else if (elem.detachEvent != null) {
                return elem.detachEvent("on" + event, fn);
            } else {
                return delete elem[event];
            }
        };
        Util.prototype.innerHeight = function() {
            if ("innerHeight" in window) {
                return window.innerHeight;
            } else {
                return document.documentElement.clientHeight;
            }
        };
        return Util;
    }();
    WeakMap = this.WeakMap || this.MozWeakMap || (WeakMap = function() {
        function WeakMap() {
            this.keys = [];
            this.values = [];
        }
        WeakMap.prototype.get = function(key) {
            var i, item, j, len, ref;
            ref = this.keys;
            for (i = j = 0, len = ref.length; j < len; i = ++j) {
                item = ref[i];
                if (item === key) {
                    return this.values[i];
                }
            }
        };
        WeakMap.prototype.set = function(key, value) {
            var i, item, j, len, ref;
            ref = this.keys;
            for (i = j = 0, len = ref.length; j < len; i = ++j) {
                item = ref[i];
                if (item === key) {
                    this.values[i] = value;
                    return;
                }
            }
            this.keys.push(key);
            return this.values.push(value);
        };
        return WeakMap;
    }());
    MutationObserver = this.MutationObserver || this.WebkitMutationObserver || this.MozMutationObserver || (MutationObserver = function() {
        function MutationObserver() {
            if (typeof console !== "undefined" && console !== null) {
                console.warn("MutationObserver is not supported by your browser.");
            }
            if (typeof console !== "undefined" && console !== null) {
                console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content.");
            }
        }
        MutationObserver.notSupported = true;
        MutationObserver.prototype.observe = function() {};
        return MutationObserver;
    }());
    getComputedStyle = this.getComputedStyle || function(el, pseudo) {
        this.getPropertyValue = function(prop) {
            var ref;
            if (prop === "float") {
                prop = "styleFloat";
            }
            if (getComputedStyleRX.test(prop)) {
                prop.replace(getComputedStyleRX, function(_, _char) {
                    return _char.toUpperCase();
                });
            }
            return ((ref = el.currentStyle) != null ? ref[prop] : void 0) || null;
        };
        return this;
    };
    getComputedStyleRX = /(\-([a-z]){1})/g;
    this.WOW = function() {
        WOW.prototype.defaults = {
            boxClass: "wow",
            animateClass: "animated",
            offset: 0,
            mobile: true,
            live: true,
            callback: null,
            scrollContainer: null
        };
        function WOW(options) {
            if (options == null) {
                options = {};
            }
            this.scrollCallback = bind(this.scrollCallback, this);
            this.scrollHandler = bind(this.scrollHandler, this);
            this.resetAnimation = bind(this.resetAnimation, this);
            this.start = bind(this.start, this);
            this.scrolled = true;
            this.config = this.util().extend(options, this.defaults);
            if (options.scrollContainer != null) {
                this.config.scrollContainer = document.querySelector(options.scrollContainer);
            }
            this.animationNameCache = new WeakMap();
            this.wowEvent = this.util().createEvent(this.config.boxClass);
        }
        WOW.prototype.init = function() {
            var ref;
            this.element = window.document.documentElement;
            if ((ref = document.readyState) === "interactive" || ref === "complete") {
                this.start();
            } else {
                this.util().addEvent(document, "DOMContentLoaded", this.start);
            }
            return this.finished = [];
        };
        WOW.prototype.start = function() {
            var box, j, len, ref;
            this.stopped = false;
            this.boxes = function() {
                var j, len, ref, results;
                ref = this.element.querySelectorAll("." + this.config.boxClass);
                results = [];
                for (j = 0, len = ref.length; j < len; j++) {
                    box = ref[j];
                    results.push(box);
                }
                return results;
            }.call(this);
            this.all = function() {
                var j, len, ref, results;
                ref = this.boxes;
                results = [];
                for (j = 0, len = ref.length; j < len; j++) {
                    box = ref[j];
                    results.push(box);
                }
                return results;
            }.call(this);
            if (this.boxes.length) {
                if (this.disabled()) {
                    this.resetStyle();
                } else {
                    ref = this.boxes;
                    for (j = 0, len = ref.length; j < len; j++) {
                        box = ref[j];
                        this.applyStyle(box, true);
                    }
                }
            }
            if (!this.disabled()) {
                this.util().addEvent(this.config.scrollContainer || window, "scroll", this.scrollHandler);
                this.util().addEvent(window, "resize", this.scrollHandler);
                this.interval = setInterval(this.scrollCallback, 50);
            }
            if (this.config.live) {
                return new MutationObserver(function(_this) {
                    return function(records) {
                        var k, len1, node, record, results;
                        results = [];
                        for (k = 0, len1 = records.length; k < len1; k++) {
                            record = records[k];
                            results.push(function() {
                                var l, len2, ref1, results1;
                                ref1 = record.addedNodes || [];
                                results1 = [];
                                for (l = 0, len2 = ref1.length; l < len2; l++) {
                                    node = ref1[l];
                                    results1.push(this.doSync(node));
                                }
                                return results1;
                            }.call(_this));
                        }
                        return results;
                    };
                }(this)).observe(document.body, {
                    childList: true,
                    subtree: true
                });
            }
        };
        WOW.prototype.stop = function() {
            this.stopped = true;
            this.util().removeEvent(this.config.scrollContainer || window, "scroll", this.scrollHandler);
            this.util().removeEvent(window, "resize", this.scrollHandler);
            if (this.interval != null) {
                return clearInterval(this.interval);
            }
        };
        WOW.prototype.sync = function(element) {
            if (MutationObserver.notSupported) {
                return this.doSync(this.element);
            }
        };
        WOW.prototype.doSync = function(element) {
            var box, j, len, ref, results;
            if (element == null) {
                element = this.element;
            }
            if (element.nodeType !== 1) {
                return;
            }
            element = element.parentNode || element;
            ref = element.querySelectorAll("." + this.config.boxClass);
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
                box = ref[j];
                if (indexOf.call(this.all, box) < 0) {
                    this.boxes.push(box);
                    this.all.push(box);
                    if (this.stopped || this.disabled()) {
                        this.resetStyle();
                    } else {
                        this.applyStyle(box, true);
                    }
                    results.push(this.scrolled = true);
                } else {
                    results.push(void 0);
                }
            }
            return results;
        };
        WOW.prototype.show = function(box) {
            this.applyStyle(box);
            box.className = box.className + " " + this.config.animateClass;
            if (this.config.callback != null) {
                this.config.callback(box);
            }
            this.util().emitEvent(box, this.wowEvent);
            this.util().addEvent(box, "animationend", this.resetAnimation);
            this.util().addEvent(box, "oanimationend", this.resetAnimation);
            this.util().addEvent(box, "webkitAnimationEnd", this.resetAnimation);
            this.util().addEvent(box, "MSAnimationEnd", this.resetAnimation);
            return box;
        };
        WOW.prototype.applyStyle = function(box, hidden) {
            var delay, duration, iteration;
            duration = box.getAttribute("data-wow-duration");
            delay = box.getAttribute("data-wow-delay");
            iteration = box.getAttribute("data-wow-iteration");
            return this.animate(function(_this) {
                return function() {
                    return _this.customStyle(box, hidden, duration, delay, iteration);
                };
            }(this));
        };
        WOW.prototype.animate = function() {
            if ("requestAnimationFrame" in window) {
                return function(callback) {
                    return window.requestAnimationFrame(callback);
                };
            } else {
                return function(callback) {
                    return callback();
                };
            }
        }();
        WOW.prototype.resetStyle = function() {
            var box, j, len, ref, results;
            ref = this.boxes;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
                box = ref[j];
                results.push(box.style.visibility = "visible");
            }
            return results;
        };
        WOW.prototype.resetAnimation = function(event) {
            var target;
            if (event.type.toLowerCase().indexOf("animationend") >= 0) {
                target = event.target || event.srcElement;
            }
        };
        WOW.prototype.customStyle = function(box, hidden, duration, delay, iteration) {
            if (hidden) {
                this.cacheAnimationName(box);
            }
            box.style.visibility = hidden ? "hidden" : "visible";
            if (duration) {
                this.vendorSet(box.style, {
                    animationDuration: duration
                });
            }
            if (delay) {
                this.vendorSet(box.style, {
                    animationDelay: delay
                });
            }
            if (iteration) {
                this.vendorSet(box.style, {
                    animationIterationCount: iteration
                });
            }
            this.vendorSet(box.style, {
                animationName: hidden ? "none" : this.cachedAnimationName(box)
            });
            return box;
        };
        WOW.prototype.vendors = [ "moz", "webkit" ];
        WOW.prototype.vendorSet = function(elem, properties) {
            var name, results, value, vendor;
            results = [];
            for (name in properties) {
                value = properties[name];
                elem["" + name] = value;
                results.push(function() {
                    var j, len, ref, results1;
                    ref = this.vendors;
                    results1 = [];
                    for (j = 0, len = ref.length; j < len; j++) {
                        vendor = ref[j];
                        results1.push(elem["" + vendor + name.charAt(0).toUpperCase() + name.substr(1)] = value);
                    }
                    return results1;
                }.call(this));
            }
            return results;
        };
        WOW.prototype.vendorCSS = function(elem, property) {
            var j, len, ref, result, style, vendor;
            style = getComputedStyle(elem);
            result = style.getPropertyCSSValue(property);
            ref = this.vendors;
            for (j = 0, len = ref.length; j < len; j++) {
                vendor = ref[j];
                result = result || style.getPropertyCSSValue("-" + vendor + "-" + property);
            }
            return result;
        };
        WOW.prototype.animationName = function(box) {
            var animationName, error;
            try {
                animationName = this.vendorCSS(box, "animation-name").cssText;
            } catch (error) {
                animationName = getComputedStyle(box).getPropertyValue("animation-name");
            }
            if (animationName === "none") {
                return "";
            } else {
                return animationName;
            }
        };
        WOW.prototype.cacheAnimationName = function(box) {
            return this.animationNameCache.set(box, this.animationName(box));
        };
        WOW.prototype.cachedAnimationName = function(box) {
            return this.animationNameCache.get(box);
        };
        WOW.prototype.scrollHandler = function() {
            return this.scrolled = true;
        };
        WOW.prototype.scrollCallback = function() {
            var box;
            if (this.scrolled) {
                this.scrolled = false;
                this.boxes = function() {
                    var j, len, ref, results;
                    ref = this.boxes;
                    results = [];
                    for (j = 0, len = ref.length; j < len; j++) {
                        box = ref[j];
                        if (!box) {
                            continue;
                        }
                        if (this.isVisible(box)) {
                            this.show(box);
                            continue;
                        }
                        results.push(box);
                    }
                    return results;
                }.call(this);
                if (!(this.boxes.length || this.config.live)) {
                    return this.stop();
                }
            }
        };
        WOW.prototype.offsetTop = function(element) {
            var top;
            while (element.offsetTop === void 0) {
                element = element.parentNode;
            }
            top = element.offsetTop;
            while (element = element.offsetParent) {
                top += element.offsetTop;
            }
            return top;
        };
        WOW.prototype.isVisible = function(box) {
            var bottom, offset, top, viewBottom, viewTop;
            offset = box.getAttribute("data-wow-offset") || this.config.offset;
            viewTop = this.config.scrollContainer && this.config.scrollContainer.scrollTop || window.pageYOffset;
            viewBottom = viewTop + Math.min(this.element.clientHeight, this.util().innerHeight()) - offset;
            top = this.offsetTop(box);
            bottom = top + box.clientHeight;
            return top <= viewBottom && bottom >= viewTop;
        };
        WOW.prototype.util = function() {
            return this._util != null ? this._util : this._util = new Util();
        };
        WOW.prototype.disabled = function() {
            return !this.config.mobile && this.util().isMobile(navigator.userAgent);
        };
        return WOW;
    }();
}).call(this);

var site = {
    plyr: function() {
        plyr.setup(document.querySelectorAll(".js-plyr"), {
            autoplay: true,
            muted: true
        });
    },
    scrollReveals: function() {
        var wow = new WOW({
            boxClass: "js-inview",
            animateClass: "is-inview",
            offset: 90,
            live: false,
            scrollContainer: null
        });
        wow.init();
    },
    workPromoSlider: function() {
        var slider = tns({
            container: ".js-slider-work",
            items: 1,
            slideBy: "page",
            autoplay: false,
            mode: "gallery",
            controls: false,
            arrowKeys: true
        });
    },
    mobileBgVid: function() {
        var video = document.querySelectorAll(".bg-vid__vid");
        enableInlineVideo(video, {
            iPad: true
        });
    }
};

window.addEventListener("load", function(event) {
    site.scrollReveals();
    if (document.querySelectorAll(".js-slider-work").length) {
        console.log("hey");
        site.workPromoSlider();
    }
    if (document.querySelectorAll(".js-plyr").length) {
        site.plyr();
    }
    if (document.querySelectorAll(".bg-vid__vid").length) {
        site.mobileBgVid();
    }
});